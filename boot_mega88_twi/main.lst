   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  94               	.global	__vector_default
  96               	__vector_default:
   1:main.c        **** /*****************************************************************************
   2:main.c        **** *
   3:main.c        **** * AVRPROG compatible boot-loader
   4:main.c        **** * Version  : 0.85 (Dec. 2008)
   5:main.c        **** * Compiler : avr-gcc 4.1.2 / avr-libc 1.4.6
   6:main.c        **** * size     : depends on features and startup ( minmal features < 512 words)
   7:main.c        **** * by       : Martin Thomas, Kaiserslautern, Germany
   8:main.c        **** *            eversmith@heizung-thomas.de
   9:main.c        **** *            Additional code and improvements contributed by:
  10:main.c        **** *           - Uwe Bonnes
  11:main.c        **** *           - Bjoern Riemer
  12:main.c        **** *           - Olaf Rempel
  13:main.c        **** *
  14:main.c        **** * License  : Copyright (c) 2006-2008 M. Thomas, U. Bonnes, O. Rempel
  15:main.c        **** *            Free to use. You have to mention the copyright
  16:main.c        **** *            owners in source-code and documentation of derived
  17:main.c        **** *            work. No warranty! (Yes, you can insert the BSD
  18:main.c        **** *            license here)
  19:main.c        **** *
  20:main.c        **** * Tested with ATmega8, ATmega16, ATmega162, ATmega32, ATmega324P,
  21:main.c        **** *             ATmega644, ATmega644P, ATmega128, AT90CAN128
  22:main.c        **** *
  23:main.c        **** * - Initial versions have been based on the Butterfly bootloader-code
  24:main.c        **** *   by Atmel Corporation (Authors: BBrandal, PKastnes, ARodland, LHM)
  25:main.c        **** *
  26:main.c        **** ****************************************************************************
  27:main.c        **** *
  28:main.c        **** *  See the makefile and readme.txt for information on how to adapt 
  29:main.c        **** *  the linker-settings to the selected Boot Size (BOOTSIZE=xxxx) and 
  30:main.c        **** *  the MCU-type. Other configurations futher down in this file.
  31:main.c        **** *
  32:main.c        **** *  With BOOT_SIMPLE, minimal features and discarded int-vectors
  33:main.c        **** *  this bootloader has should fit into a a 512 word (1024, 0x400 bytes) 
  34:main.c        **** *  bootloader-section. 
  35:main.c        **** *
  36:main.c        **** ****************************************************************************/
  37:main.c        **** //BOOTSIZE=1024
  38:main.c        **** 
  39:main.c        **** /* FREQENCY */
  40:main.c        **** #define F_CPU 7372800
  41:main.c        **** 
  42:main.c        **** /* UART BAUD RATE 19200 */
  43:main.c        **** #define BAUDRATE 19200
  44:main.c        **** 
  45:main.c        **** /* Режим двойной скорости UART (бит U2C)*/
  46:main.c        **** #define UART_DOUBLESPEED
  47:main.c        **** 
  48:main.c        **** #define DEVTYPE     DEVTYPE_BOOT
  49:main.c        **** 
  50:main.c        **** /*
  51:main.c        ****  * Выбор порта для кнопки входа в загрузчик
  52:main.c        ****  * Чтобы войти в загрузчик надо чтобы при запуске эта кнопка замыкала пин на землю
  53:main.c        ****  */
  54:main.c        **** #define	IVERT_BLPIN	0
  55:main.c        **** #define BLPORT		PORTB
  56:main.c        **** #define BLDDR		DDRB
  57:main.c        **** #define BLPIN		PINB
  58:main.c        **** #define BLPNUM		PINB1
  59:main.c        **** 
  60:main.c        **** /*
  61:main.c        ****  * Выбор порта для индикатора работы загрузчика
  62:main.c        ****  * Светодиод горит - мы в загрузчике
  63:main.c        ****  */
  64:main.c        **** 
  65:main.c        **** #define ENABLE_BOOT_LED
  66:main.c        **** #define BIPORT		PORTB
  67:main.c        **** #define BIDDR		DDRB
  68:main.c        **** #define BIPIN		PINB
  69:main.c        **** #define BIPNUM		PINB0
  70:main.c        **** 
  71:main.c        **** 
  72:main.c        **** #define ENABLE_BOOT_BUZ
  73:main.c        **** #define DDR_BUZ		DDRC
  74:main.c        **** #define BUZ			PC0
  75:main.c        **** #define PORT_BUZ	PORTC
  76:main.c        **** 
  77:main.c        **** 
  78:main.c        **** #define ENABLE_BOOT_RS485
  79:main.c        **** #define DDR_RS485	DDRD
  80:main.c        **** #define RE_DE		PD3
  81:main.c        **** #define PORT_RS485	PORTD
  82:main.c        **** 
  83:main.c        **** 
  84:main.c        **** #define DISABLE_WDT_AT_STARTUP
  85:main.c        **** 
  86:main.c        **** /*
  87:main.c        ****  * Watchdog-reset is issued at exit 
  88:main.c        ****  * define the timeout-value here (see avr-libc manual)
  89:main.c        ****  */
  90:main.c        **** #define EXIT_WDT_TIME   WDTO_250MS
  91:main.c        **** 
  92:main.c        **** /*
  93:main.c        ****  * Выбор режима загрузчика
  94:main.c        ****  * SIMPLE-Mode - Загрузчик стартует когда нажата его кнопка
  95:main.c        ****  *   переход к основной программе осуществляется после сброса 
  96:main.c        ****  *   (кнопка должна быть отжата) либо по команде от программатора
  97:main.c        ****  *   При этом режиме вывод на кнопку конфигурируется как вход-с подтягом,
  98:main.c        ****  * WAIT-mode Bootloader ожидает команды на вход, если ее не было в течении промежутка времени
  99:main.c        ****  *   (который настраивается) то проихсодит переход к основной программе.
 100:main.c        ****  */
 101:main.c        **** #define START_SIMPLE
 102:main.c        **** //#define START_WAIT
 103:main.c        **** 
 104:main.c        **** /* Команда для входа в загрузчик в START_WAIT */
 105:main.c        **** #define START_WAIT_UARTCHAR 'S'
 106:main.c        **** 
 107:main.c        **** /* Выдержка для START_WAIT mode ( t = WAIT_TIME * 10ms ) */
 108:main.c        **** #define WAIT_VALUE 500 /* сейчас: 500*10ms = 3000ms = 5sec !!!Меньше 5сек. не юзать!!!*/
 109:main.c        **** 
 110:main.c        **** /*
 111:main.c        ****  * enable/disable readout of fuse and lock-bits
 112:main.c        ****  * (AVRPROG has to detect the AVR correctly by device-code
 113:main.c        ****  * to show the correct information).
 114:main.c        ****  */
 115:main.c        **** //#define ENABLEREADFUSELOCK
 116:main.c        **** 
 117:main.c        **** /* enable/disable write of lock-bits
 118:main.c        ****  * WARNING: lock-bits can not be reseted by bootloader (as far as I know)
 119:main.c        ****  * Only protection no unprotection, "chip erase" from bootloader only
 120:main.c        ****  * clears the flash but does no real "chip erase" (this is not possible
 121:main.c        ****  * with a bootloader as far as I know)
 122:main.c        ****  * Keep this undefined!
 123:main.c        ****  */
 124:main.c        **** //#define WRITELOCKBITS
 125:main.c        **** 
 126:main.c        **** /*
 127:main.c        ****  * define the following if the bootloader should not output
 128:main.c        ****  * itself at flash read (will fake an empty boot-section)
 129:main.c        ****  */
 130:main.c        **** //#define READ_PROTECT_BOOTLOADER 
 131:main.c        **** 
 132:main.c        **** #define VERSION_HIGH '0'
 133:main.c        **** #define VERSION_LOW  '8'
 134:main.c        **** 
 135:main.c        **** #define GET_LOCK_BITS           0x0001
 136:main.c        **** #define GET_LOW_FUSE_BITS       0x0000
 137:main.c        **** #define GET_HIGH_FUSE_BITS      0x0003
 138:main.c        **** #define GET_EXTENDED_FUSE_BITS  0x0002
 139:main.c        **** 
 140:main.c        **** /* Расчет делителя частоты для USART*/
 141:main.c        **** #ifdef UART_DOUBLESPEED
 142:main.c        **** 
 143:main.c        **** 	#define UART_CALC_BAUDRATE(baudRate) ((uint32_t)((F_CPU) + ((uint32_t)baudRate * 4UL)) / ((uint32_
 144:main.c        **** 
 145:main.c        **** #else
 146:main.c        **** 
 147:main.c        **** 	#define UART_CALC_BAUDRATE(baudRate) ((uint32_t)((F_CPU) + ((uint32_t)baudRate * 8UL)) / ((uint32_
 148:main.c        **** 
 149:main.c        **** #endif
 150:main.c        **** 
 151:main.c        **** 
 152:main.c        **** #include <stdint.h>
 153:main.c        **** #include <avr/io.h>
 154:main.c        **** #include <avr/wdt.h>
 155:main.c        **** #include <avr/boot.h>
 156:main.c        **** #include <avr/pgmspace.h>
 157:main.c        **** #include <avr/eeprom.h>
 158:main.c        **** #include <avr/interrupt.h>
 159:main.c        **** #include <util/delay.h>
 160:main.c        **** 
 161:main.c        **** #include "chipdef.h"
 162:main.c        **** 
 163:main.c        **** uint8_t gBuffer[SPM_PAGESIZE];
 164:main.c        **** 
 165:main.c        **** #if defined(BOOTLOADERHASNOVECTORS)
 166:main.c        **** 	#warning "This Bootloader does not link interrupt vectors - see makefile"
 167:main.c        **** 	/* make the linker happy - it wants to see __vector_default */
 168:main.c        **** 	// void __vector_default(void) { ; }
 169:main.c        **** 	void __vector_default(void) { ; }
  97               	abn	68,0,169,.LM0-.LFBB1
  98               	.LM0:
  99               	.LFBB1:
 100               	/* prologue: function */
 101               	/* frame size = 0 */
 102               	/* epilogue start */
 104               	.LM1:
 105 0000 0895      		ret
 107               	.Lscope1:
 111               	sendchar:
 170:main.c        **** nt8_t data)
 171:main.c        **** {
 172:main.c        **** 
 173:main.c        **** #ifdef ENABLE_BOOT_RS485
 112               	3,.LM2-.LFBB2
 113               	.LM2:
 114               	.LFBB2:
 115               	/* prologue: function */
 116               	/* frame size = 0 */
 117 0002 982F      		mov r25,r24
 174:main.c        **** PORT_RS485|=(1<<RE_DE);
 175:main.c        **** #endif
 176:main.c        **** 
 118               	n	68,0,176,.LM3-.LFBB2
 119               	.LM3:
 120 0004 5B9A      		sbi 43-32,3
 121 0006 00C0      		rjmp .L4
 122               	.L5:
 177:main.c        **** while (!(UART_STATUS & (1<<UART_TXREADY))) asm volatile ("wdr");
 178:main.c        **** 	UART_DATA = data;
 179:main.c        **** 	_delay_ms(1);
 123               	bn	68,0,179,.LM4-.LFBB2
 124               	.LM4:
 125               	/* #APP */
 126               	 ;  179 "main.c" 1
 127 0008 A895      		wdr
 128               	 ;  0 "" 2
 129               	/* #NOAPP */
 130               	.L4:
 131 000a 8091 C000 		lds r24,192
 132 000e 85FF      		sbrs r24,5
 133 0010 00C0      		rjmp .L5
 180:main.c        **** 
 134               	0,180,.LM5-.LFBB2
 135               	.LM5:
 136 0012 9093 C600 		sts 198,r25
 137               	.LBB139:
 138               	.LBB140:
 139               	.LBB141:
 140               	.LBB142:
 142               	.Ltext1:
   1:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
   5:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
   8:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  11:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      distribution.
  15:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  16:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  20:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  32:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  34:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  37:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  39:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /** \file */
  40:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     \code
  42:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     \endcode
  44:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  45:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  53:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  60:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  62:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** */
  63:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  64:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** #endif
  68:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  69:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  71:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     register.
  76:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  77:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     can be achieved.
  79:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** */
  80:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** void
  81:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** {
  83:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 	);
  89:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** }
  90:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  91:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  93:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     counter register pair.
  98:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  99:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****  */
 102:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** void
 103:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** {
 105:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 143               	8,0,105,.LM6-.LFBB2
 144               	.LM6:
 145 0016 83E3      		ldi r24,lo8(1843)
 146 0018 97E0      		ldi r25,hi8(1843)
 147               	/* #APP */
 148               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 149 001a 0197      		1: sbiw r24,1
 150 001c 01F4      		brne 1b
 151               	 ;  0 "" 2
 152               	/* #NOAPP */
 153               	.LBE142:
 154               	.LBE141:
 155               	.LBE140:
 156               	.LBE139:
 158               	.Ltext2:
 181:main.c        **** #ifdef ENABLE_BOOT_RS485
 182:main.c        **** 	PORT_RS485&=~(1<<RE_DE);
 183:main.c        **** #endif
 184:main.c        **** 
 159               	,.LM7-.LFBB2
 160               	.LM7:
 161 001e 5B98      		cbi 43-32,3
 162               	/* epilogue start */
 185:main.c        **** 
 186:main.c        **** 
 187:main.c        **** static uint8_t recvchar(void)
 163               	abn	68,0,187,.LM8-.LFBB2
 164               	.LM8:
 165 0020 0895      		ret
 167               	.Lscope2:
 169               	.global	Buzzer_End0
 171               	Buzzer_End0:
 188:main.c        **** 	while (!(UART_STATUS & (1<<UART_RXREADY))) asm volatile ("wdr");
 189:main.c        **** 	return UART_DATA;
 190:main.c        **** }
 191:main.c        **** 
 192:main.c        **** static inline void eraseFlash(void)
 193:main.c        **** {
 194:main.c        **** 	// erase only main section (bootloader protection)
 195:main.c        **** 	uint32_t addr = 0;
 196:main.c        **** 	while (APP_END > addr) 
 197:main.c        **** 		{
 198:main.c        **** 		boot_page_erase(addr);		// Perform page erase
 199:main.c        **** 		boot_spm_busy_wait();		// Wait until the memory is erased.
 200:main.c        **** 		addr += SPM_PAGESIZE;
 201:main.c        **** 		asm volatile ("wdr");
 202:main.c        **** 		}
 203:main.c        **** 	boot_rww_enable();
 204:main.c        **** }
 205:main.c        **** 
 206:main.c        **** static inline void recvBuffer(pagebuf_t size)
 207:main.c        **** {
 208:main.c        **** 	pagebuf_t cnt;
 209:main.c        **** 	uint8_t *tmp = gBuffer;
 210:main.c        **** 
 211:main.c        **** 	for (cnt = 0; cnt < sizeof(gBuffer); cnt++) 
 212:main.c        **** 		{
 213:main.c        **** 		*tmp++ = (cnt < size) ? recvchar() : 0xFF;
 214:main.c        **** 		}
 215:main.c        **** }
 216:main.c        **** 
 217:main.c        **** static inline uint16_t writeFlashPage(uint16_t waddr, pagebuf_t size)
 218:main.c        **** {
 219:main.c        **** 	uint32_t pagestart = (uint32_t)waddr<<1;
 220:main.c        **** 	uint32_t baddr = pagestart;
 221:main.c        **** 	uint16_t data;
 222:main.c        **** 	uint8_t *tmp = gBuffer;
 223:main.c        **** 
 224:main.c        **** 	do 
 225:main.c        **** 		{
 226:main.c        **** 		data = *tmp++;
 227:main.c        **** 		data |= *tmp++ << 8;
 228:main.c        **** 		boot_page_fill(baddr, data);	// call asm routine.
 229:main.c        **** 
 230:main.c        **** 		baddr += 2;			// Select next word in memory
 231:main.c        **** 		size -= 2;			// Reduce number of bytes to write by two
 232:main.c        **** 		} 
 233:main.c        **** 	while (size);				// Loop until all bytes written
 234:main.c        **** 
 235:main.c        **** 	boot_page_write(pagestart);
 236:main.c        **** 	boot_spm_busy_wait();
 237:main.c        **** 	boot_rww_enable();		// Re-enable the RWW section
 238:main.c        **** 
 239:main.c        **** 	return baddr>>1;
 240:main.c        **** }
 241:main.c        **** 
 242:main.c        **** static inline uint16_t writeEEpromPage(uint16_t address, pagebuf_t size)
 243:main.c        **** {
 244:main.c        **** 	uint8_t *tmp = gBuffer;
 245:main.c        **** 
 246:main.c        **** 	do 
 247:main.c        **** 		{
 248:main.c        **** 		eeprom_write_byte( (uint8_t*)address, *tmp++ );
 249:main.c        **** 		address++;			// Select next byte
 250:main.c        **** 		size--;				// Decreas number of bytes to write
 251:main.c        **** 		}
 252:main.c        **** 	while (size);				// Loop until all bytes written
 253:main.c        **** 
 254:main.c        **** 	// eeprom_busy_wait();
 255:main.c        **** 
 256:main.c        **** 	return address;
 257:main.c        **** }
 258:main.c        **** 
 259:main.c        **** static inline uint16_t readFlashPage(uint16_t waddr, pagebuf_t size)
 260:main.c        **** {
 261:main.c        **** 	uint32_t baddr = (uint32_t)waddr<<1;
 262:main.c        **** 	uint16_t data;
 263:main.c        **** 
 264:main.c        **** 	do 
 265:main.c        **** 	{
 266:main.c        **** 
 267:main.c        **** #ifndef READ_PROTECT_BOOTLOADER
 268:main.c        **** #warning "Bootloader not read-protected"
 269:main.c        **** 
 270:main.c        **** 	#if defined(RAMPZ)
 271:main.c        **** 		data = pgm_read_word_far(baddr);
 272:main.c        **** 	#else
 273:main.c        **** 		data = pgm_read_word_near(baddr);
 274:main.c        **** 	#endif
 275:main.c        **** 
 276:main.c        **** #else
 277:main.c        **** 		// don't read bootloader
 278:main.c        **** 		if ( baddr < APP_END ) 
 279:main.c        **** 		{
 280:main.c        **** 		#if defined(RAMPZ)
 281:main.c        **** 			data = pgm_read_word_far(baddr);
 282:main.c        **** 		#else
 283:main.c        **** 			data = pgm_read_word_near(baddr);
 284:main.c        **** 		#endif
 285:main.c        **** 		}
 286:main.c        **** 		else 
 287:main.c        **** 		{
 288:main.c        **** 		data = 0xFFFF; // fake empty
 289:main.c        **** 		}
 290:main.c        **** #endif
 291:main.c        **** 		sendchar(data);			// send LSB
 292:main.c        **** 		sendchar((data >> 8));		// send MSB
 293:main.c        **** 		baddr += 2;			// Select next word in memory
 294:main.c        **** 		size -= 2;			// Subtract two bytes from number of bytes to read
 295:main.c        **** 	} 
 296:main.c        **** 	while (size);				// Repeat until block has been read
 297:main.c        **** 	return baddr>>1;
 298:main.c        **** }
 299:main.c        **** 
 300:main.c        **** static inline uint16_t readEEpromPage(uint16_t address, pagebuf_t size)
 301:main.c        **** {
 302:main.c        **** 	do 
 303:main.c        **** 	{
 304:main.c        **** 	asm volatile ("wdr");
 305:main.c        **** 	sendchar( eeprom_read_byte( (uint8_t*)address ) );
 306:main.c        **** 	address++;
 307:main.c        **** 	size--;				// Decrease number of bytes to read
 308:main.c        **** 	} 
 309:main.c        **** 	while (size);				// Repeat until block has been read
 310:main.c        **** 
 311:main.c        **** 	return address;
 312:main.c        **** }
 313:main.c        **** 
 314:main.c        **** #if defined(ENABLEREADFUSELOCK)
 315:main.c        **** static uint8_t read_fuse_lock(uint16_t addr)
 316:main.c        **** {
 317:main.c        **** 	uint8_t mode = (1<<BLBSET) | (1<<SPMEN);
 318:main.c        **** 	uint8_t retval;
 319:main.c        **** 
 320:main.c        **** 	asm volatile
 321:main.c        **** 	(
 322:main.c        **** 		"movw r30, %3\n\t"		/* Z to addr */ \
 323:main.c        **** 		"sts %0, %2\n\t"		/* set mode in SPM_REG */ \
 324:main.c        **** 		"lpm\n\t"			/* load fuse/lock value into r0 */ \
 325:main.c        **** 		"mov %1,r0\n\t"			/* save return value */ \
 326:main.c        **** 		: "=m" (SPM_REG),
 327:main.c        **** 		  "=r" (retval)
 328:main.c        **** 		: "r" (mode),
 329:main.c        **** 		  "r" (addr)
 330:main.c        **** 		: "r30", "r31", "r0"
 331:main.c        **** 	);
 332:main.c        **** 	return retval;
 333:main.c        **** }
 334:main.c        **** #endif
 335:main.c        **** 
 336:main.c        **** static void send_boot(void)
 337:main.c        **** {
 338:main.c        **** 	sendchar('A');
 339:main.c        **** 	sendchar('V');
 340:main.c        **** 	sendchar('R');
 341:main.c        **** 	sendchar('B');
 342:main.c        **** 	sendchar('O');
 343:main.c        **** 	sendchar('O');
 344:main.c        **** 	sendchar('T');
 345:main.c        **** }
 346:main.c        **** 
 347:main.c        **** static void (*jump_to_app)(void) = 0x0000;
 348:main.c        **** 
 349:main.c        **** int main(void)
 350:main.c        **** {
 351:main.c        **** 	uint16_t address = 0;
 352:main.c        **** 	uint8_t device = 0, val;
 353:main.c        **** 
 354:main.c        **** #ifdef ENABLE_BOOT_RS485
 355:main.c        **** 	DDR_RS485|= (1<<RE_DE);
 356:main.c        **** 	PORT_RS485&=~(1<<RE_DE);
 357:main.c        **** #endif
 358:main.c        **** 
 359:main.c        **** #ifdef ENABLE_BOOT_LED	// LED ON
 360:main.c        **** 	BIPORT |= (1<<BIPNUM);	
 361:main.c        **** 	BIDDR  |= (1<<BIPNUM);
 362:main.c        **** #endif
 363:main.c        **** 
 364:main.c        **** #ifdef ENABLE_BOOT_BUZ //Buzzer ON
 365:main.c        **** 		DDR_BUZ|=(1<<BUZ);
 366:main.c        **** #endif
 367:main.c        **** 
 368:main.c        **** #ifdef DISABLE_WDT_AT_STARTUP
 369:main.c        **** 	#ifdef WDT_OFF_SPECIAL
 370:main.c        **** 		#warning "using target specific watchdog_off"
 371:main.c        **** 		bootloader_wdt_off();
 372:main.c        **** 	#else
 373:main.c        **** 		cli();
 374:main.c        **** 		wdt_reset();
 375:main.c        **** 		wdt_enable(WDTO_2S);
 376:main.c        **** 	#endif
 377:main.c        **** #endif
 378:main.c        **** 	
 379:main.c        **** #ifdef START_POWERSAVE
 380:main.c        **** 	uint8_t OK = 1;
 381:main.c        **** #endif
 382:main.c        **** 
 383:main.c        **** 	BLDDR  &= ~(1<<BLPNUM);		// set as Input
 384:main.c        **** 	BLPORT |= (1<<BLPNUM);		// Enable pullup
 385:main.c        **** 
 386:main.c        **** 	// Set baud rate
 387:main.c        **** 	UART_BAUD_HIGH = (UART_CALC_BAUDRATE(BAUDRATE)>>8) & 0xFF;
 388:main.c        **** 	UART_BAUD_LOW = (UART_CALC_BAUDRATE(BAUDRATE) & 0xFF);
 389:main.c        **** 
 390:main.c        **** #ifdef UART_DOUBLESPEED
 391:main.c        **** 	UART_STATUS = ( 1<<UART_DOUBLE );
 392:main.c        **** #endif
 393:main.c        **** 
 394:main.c        **** 	UART_CTRL = UART_CTRL_DATA;
 395:main.c        **** 	UART_CTRL2 = UART_CTRL2_DATA;
 396:main.c        **** 	
 397:main.c        **** #if defined(START_POWERSAVE)
 398:main.c        **** 	/*
 399:main.c        **** 		This is an adoption of the Butterfly Bootloader startup-sequence.
 400:main.c        **** 		It may look a little strange but separating the login-loop from
 401:main.c        **** 		the main parser-loop gives a lot a possibilities (timeout, sleep-modes
 402:main.c        **** 	    etc.).
 403:main.c        **** 	*/
 404:main.c        **** 	for(;OK;) 
 405:main.c        **** 	{
 406:main.c        **** 
 407:main.c        **** 		asm volatile ("wdr");
 408:main.c        **** 
 409:main.c        **** 	#if(IVERT_BLPIN)
 410:main.c        **** 		if (!(BLPIN & (1<<BLPNUM)))
 411:main.c        **** 	#else
 412:main.c        **** 		if ((BLPIN & (1<<BLPNUM)))
 413:main.c        **** 	#endif
 414:main.c        **** 		{
 415:main.c        **** 		asm volatile ("wdr");
 416:main.c        **** 		// jump to main app if pin is not grounded
 417:main.c        **** 		BLPORT &= ~(1<<BLPNUM);	// set to default
 418:main.c        **** 
 419:main.c        **** 		#ifdef UART_DOUBLESPEED
 420:main.c        **** 			UART_STATUS &= ~( 1<<UART_DOUBLE );
 421:main.c        **** 		#endif
 422:main.c        **** 
 423:main.c        **** 
 424:main.c        **** 		#ifdef ENABLE_BOOT_LED	// LED OFF
 425:main.c        **** 		BIPORT &= ~(1<<BIPNUM);	
 426:main.c        **** 		BIDDR  &= ~(1<<BIPNUM);
 427:main.c        **** 		#endif
 428:main.c        **** 
 429:main.c        **** 		#ifdef ENABLE_BOOT_BUZ
 430:main.c        **** 		DDR_BUZ&=~(1<<BUZ);
 431:main.c        **** 		#endif
 432:main.c        **** 
 433:main.c        **** 		jump_to_app();		// Jump to application sector
 434:main.c        **** 
 435:main.c        **** 		} 
 436:main.c        **** 		else 
 437:main.c        **** 		{
 438:main.c        **** 		val = recvchar();
 439:main.c        **** 		/* ESC */
 440:main.c        **** 			if (val == 0x1B) 
 441:main.c        **** 			{
 442:main.c        **** 				// AVRPROG connection
 443:main.c        **** 				// Wait for signon
 444:main.c        **** 				while (val != 'S')
 445:main.c        **** 				{
 446:main.c        **** 					val = recvchar();
 447:main.c        **** 					asm volatile ("wdr");
 448:main.c        **** 				}
 449:main.c        **** 
 450:main.c        **** 				send_boot();			// Report signon
 451:main.c        **** 				OK = 0;
 452:main.c        **** 			} 
 453:main.c        **** 			else 
 454:main.c        **** 			{
 455:main.c        **** 			asm volatile ("wdr");
 456:main.c        **** 			sendchar('?');
 457:main.c        **** 			}
 458:main.c        **** 	    }
 459:main.c        **** 		// Power-Save code here
 460:main.c        **** 	}
 461:main.c        **** 
 462:main.c        **** #elif defined(START_SIMPLE)
 463:main.c        **** 
 464:main.c        **** #if(IVERT_BLPIN)
 465:main.c        **** 	if (!(BLPIN & (1<<BLPNUM)))
 466:main.c        **** #else
 467:main.c        **** 	if ((BLPIN & (1<<BLPNUM)))
 468:main.c        **** #endif
 469:main.c        **** 	{
 470:main.c        **** 		asm volatile ("wdr");
 471:main.c        **** 		// jump to main app if pin is not grounded
 472:main.c        **** 		BLPORT &= ~(1<<BLPNUM);		// set to default	
 473:main.c        **** 			
 474:main.c        **** 	#ifdef UART_DOUBLESPEED
 475:main.c        **** 		UART_STATUS &= ~( 1<<UART_DOUBLE );
 476:main.c        **** 	#endif
 477:main.c        **** 
 478:main.c        **** 		#ifdef ENABLE_BOOT_LED	// LED OFF
 479:main.c        **** 		BIPORT &= ~(1<<BIPNUM);	
 480:main.c        **** 		BIDDR  &= ~(1<<BIPNUM);
 481:main.c        **** 		#endif
 482:main.c        **** 
 483:main.c        **** 		#ifdef ENABLE_BOOT_BUZ
 484:main.c        **** 		DDR_BUZ&=~(1<<BUZ);
 485:main.c        **** 		#endif
 486:main.c        **** 
 487:main.c        **** 		jump_to_app();			// Jump to application sector
 488:main.c        **** 	}
 489:main.c        **** 
 490:main.c        **** #elif defined(START_WAIT)
 491:main.c        **** 
 492:main.c        **** 	uint16_t cnt = 0;
 493:main.c        **** 
 494:main.c        **** 	while (1) {
 495:main.c        **** 
 496:main.c        **** 		asm volatile ("wdr");
 497:main.c        **** 
 498:main.c        **** 		if (UART_STATUS & (1<<UART_RXREADY))
 499:main.c        **** 			if (UART_DATA == START_WAIT_UARTCHAR)
 500:main.c        **** 				break;
 501:main.c        **** 
 502:main.c        **** 		if (cnt++ >= WAIT_VALUE) {
 503:main.c        **** 			BLPORT &= ~(1<<BLPNUM);		// set to default
 504:main.c        **** 
 505:main.c        **** 
 506:main.c        **** 			#ifdef ENABLE_BOOT_LED	// LED OFF
 507:main.c        **** 			BIPORT &= ~(1<<BIPNUM);	
 508:main.c        **** 			BIDDR  &= ~(1<<BIPNUM);
 509:main.c        **** 			#endif
 510:main.c        **** 
 511:main.c        **** 			#ifdef ENABLE_BOOT_BUZ
 512:main.c        **** 			DDR_BUZ&=~(1<<BUZ);
 513:main.c        **** 			#endif
 514:main.c        **** 
 515:main.c        **** 			jump_to_app();			// Jump to application sector
 516:main.c        **** 		}
 517:main.c        **** 
 518:main.c        **** 		_delay_ms(10);
 519:main.c        **** 	}
 520:main.c        **** 	send_boot();
 521:main.c        **** 
 522:main.c        **** #elif defined(START_BOOTICE)
 523:main.c        **** #warning "BOOTICE mode - no startup-condition"
 524:main.c        **** 
 525:main.c        **** #else
 526:main.c        **** #error "Select START_ condition for bootloader in main.c"
 527:main.c        **** #endif
 528:main.c        **** 
 529:main.c        **** #ifdef ENABLE_BOOT_BUZ //Buzzer ON
 530:main.c        **** 
 531:main.c        **** 		asm volatile ("wdr");
 532:main.c        **** 		_delay_ms(1000);
 533:main.c        **** 		asm volatile ("wdr");
 534:main.c        **** 		_delay_ms(1000);
 535:main.c        **** 		asm volatile ("wdr");
 536:main.c        **** 		Buzzer_Enter0();
 537:main.c        **** 		asm volatile ("wdr");
 538:main.c        **** 
 539:main.c        **** #endif
 540:main.c        **** 
 541:main.c        **** 	while(1) 
 542:main.c        **** 	{
 543:main.c        **** 		asm volatile ("wdr");
 544:main.c        **** 		val = recvchar();
 545:main.c        **** 		// Autoincrement?
 546:main.c        **** 		if (val == 'a') 
 547:main.c        **** 		{
 548:main.c        **** 			sendchar('Y');			// Autoincrement is quicker
 549:main.c        **** 
 550:main.c        **** 		//write address
 551:main.c        **** 		} 
 552:main.c        **** 		else if (val == 'A') 
 553:main.c        **** 		{
 554:main.c        **** 			address = recvchar();		//read address 8 MSB
 555:main.c        **** 			address = (address<<8) | recvchar();
 556:main.c        **** 			sendchar('\r');
 557:main.c        **** 
 558:main.c        **** 		// Buffer load support
 559:main.c        **** 		} 
 560:main.c        **** 		else if (val == 'b') 
 561:main.c        **** 		{
 562:main.c        **** 			sendchar('Y');					// Report buffer load supported
 563:main.c        **** 			sendchar((sizeof(gBuffer) >> 8) & 0xFF);	// Report buffer size in bytes
 564:main.c        **** 			sendchar(sizeof(gBuffer) & 0xFF);
 565:main.c        **** 
 566:main.c        **** 		// Start buffer load
 567:main.c        **** 		} 
 568:main.c        **** 		else if (val == 'B') 
 569:main.c        **** 		{
 570:main.c        **** 			pagebuf_t size;
 571:main.c        **** 			size = recvchar() << 8;				// Load high byte of buffersize
 572:main.c        **** 			size |= recvchar();				// Load low byte of buffersize
 573:main.c        **** 			val = recvchar();				// Load memory type ('E' or 'F')
 574:main.c        **** 			recvBuffer(size);
 575:main.c        **** 
 576:main.c        **** 			if (device == DEVTYPE) 
 577:main.c        **** 			{
 578:main.c        **** 				if (val == 'F') 
 579:main.c        **** 				{
 580:main.c        **** 				address = writeFlashPage(address, size);
 581:main.c        **** 				} 
 582:main.c        **** 				else if (val == 'E') 
 583:main.c        **** 				{
 584:main.c        **** 				address = writeEEpromPage(address, size);
 585:main.c        **** 				}
 586:main.c        **** 				sendchar('\r');
 587:main.c        **** 			} 
 588:main.c        **** 			else 
 589:main.c        **** 			{
 590:main.c        **** 			sendchar(0);
 591:main.c        **** 			}
 592:main.c        **** 
 593:main.c        **** 		// Block read
 594:main.c        **** 		} 
 595:main.c        **** 		else if (val == 'g') 
 596:main.c        **** 		{
 597:main.c        **** 			pagebuf_t size;
 598:main.c        **** 			size = recvchar() << 8;				// Load high byte of buffersize
 599:main.c        **** 			size |= recvchar();				// Load low byte of buffersize
 600:main.c        **** 			val = recvchar();				// Get memtype
 601:main.c        **** 
 602:main.c        **** 			if (val == 'F') 
 603:main.c        **** 			{
 604:main.c        **** 			address = readFlashPage(address, size);
 605:main.c        **** 			} 
 606:main.c        **** 			else if (val == 'E') 
 607:main.c        **** 			{
 608:main.c        **** 			address = readEEpromPage(address, size);
 609:main.c        **** 			}
 610:main.c        **** 
 611:main.c        **** 		// Chip erase
 612:main.c        ****  		} 
 613:main.c        **** 		else if (val == 'e') 
 614:main.c        **** 		{
 615:main.c        **** 		if (device == DEVTYPE) 
 616:main.c        **** 			{
 617:main.c        **** 			eraseFlash();
 618:main.c        **** 			}
 619:main.c        **** 		sendchar('\r');
 620:main.c        **** 
 621:main.c        **** 		// Exit upgrade
 622:main.c        **** 		} 
 623:main.c        **** 		else if (val == 'E') 
 624:main.c        **** 		{
 625:main.c        **** 
 626:main.c        **** 		#ifdef ENABLE_BOOT_RS485
 627:main.c        **** 			PORT_RS485&=~(1<<RE_DE);
 628:main.c        **** 			DDR_RS485&=~(1<<RE_DE);
 629:main.c        **** 		#endif
 630:main.c        **** 
 631:main.c        **** 		asm volatile ("wdr");
 632:main.c        **** 		#ifdef ENABLE_BOOT_BUZ //Buzzer ON
 633:main.c        **** 			Buzzer_End0();
 634:main.c        **** 		#endif
 635:main.c        **** 		asm volatile ("wdr");
 636:main.c        **** 
 637:main.c        **** 		wdt_enable(EXIT_WDT_TIME); // Enable Watchdog Timer to give reset
 638:main.c        **** 		sendchar('\r');
 639:main.c        **** 		while(1);
 640:main.c        **** 
 641:main.c        **** 		#ifdef WRITELOCKBITS
 642:main.c        **** 			#warning "Extension 'WriteLockBits' enabled"
 643:main.c        **** 			// TODO: does not work reliably
 644:main.c        **** 			// write lockbits
 645:main.c        **** 			} 
 646:main.c        **** 			else if (val == 'l') 
 647:main.c        **** 			{
 648:main.c        **** 			if (device == DEVTYPE) 
 649:main.c        **** 				{
 650:main.c        **** 				// write_lock_bits(recvchar());
 651:main.c        **** 				boot_lock_bits_set(recvchar());	// boot.h takes care of mask
 652:main.c        **** 				boot_spm_busy_wait();
 653:main.c        **** 				}
 654:main.c        **** 			sendchar('\r');
 655:main.c        **** 		#endif
 656:main.c        **** 		// Enter programming mode
 657:main.c        **** 		} 
 658:main.c        **** 		else if (val == 'P') 
 659:main.c        **** 		{
 660:main.c        **** 		sendchar('\r');
 661:main.c        **** 
 662:main.c        **** 		// Leave programming mode
 663:main.c        **** 		} 
 664:main.c        **** 		else if (val == 'L') 
 665:main.c        **** 		{
 666:main.c        **** 		sendchar('\r');
 667:main.c        **** 		// return programmer type
 668:main.c        **** 		} 
 669:main.c        **** 		else if (val == 'p') 
 670:main.c        **** 		{
 671:main.c        **** 		sendchar('S');		// always serial programmer
 672:main.c        **** 
 673:main.c        **** 		#ifdef ENABLEREADFUSELOCK
 674:main.c        **** 			#warning "Extension 'ReadFuseLock' enabled"
 675:main.c        **** 			// read "low" fuse bits
 676:main.c        **** 			} 
 677:main.c        **** 			else if (val == 'F') 
 678:main.c        **** 			{
 679:main.c        **** 			sendchar(read_fuse_lock(GET_LOW_FUSE_BITS));
 680:main.c        **** 
 681:main.c        **** 			// read lock bits
 682:main.c        **** 			} 
 683:main.c        **** 			else if (val == 'r') 
 684:main.c        **** 			{
 685:main.c        **** 			sendchar(read_fuse_lock(GET_LOCK_BITS));
 686:main.c        **** 
 687:main.c        **** 			// read high fuse bits
 688:main.c        **** 			} 
 689:main.c        **** 			else if (val == 'N') 
 690:main.c        **** 			{
 691:main.c        **** 			sendchar(read_fuse_lock(GET_HIGH_FUSE_BITS));
 692:main.c        **** 			// read extended fuse bits
 693:main.c        **** 			} 
 694:main.c        **** 			else if (val == 'Q') 
 695:main.c        **** 			{
 696:main.c        **** 			sendchar(read_fuse_lock(GET_EXTENDED_FUSE_BITS));
 697:main.c        **** 			#endif
 698:main.c        **** 
 699:main.c        **** 		// Return device type
 700:main.c        **** 		} 
 701:main.c        **** 		else if (val == 't') 
 702:main.c        **** 		{
 703:main.c        **** 		sendchar(DEVTYPE);
 704:main.c        **** 		sendchar(0);
 705:main.c        **** 		// clear and set LED ignored
 706:main.c        **** 		} 
 707:main.c        **** 		else if ((val == 'x') || (val == 'y')) 
 708:main.c        **** 		{
 709:main.c        **** 		recvchar();
 710:main.c        **** 		sendchar('\r');
 711:main.c        **** 
 712:main.c        **** 		// set device
 713:main.c        **** 		} 
 714:main.c        **** 		else if (val == 'T') 
 715:main.c        **** 		{
 716:main.c        **** 		device = recvchar();
 717:main.c        **** 		sendchar('\r');
 718:main.c        **** 		// Return software identifier
 719:main.c        **** 		} 
 720:main.c        **** 		else if (val == 'S') 
 721:main.c        **** 		{
 722:main.c        **** 		send_boot();
 723:main.c        **** 
 724:main.c        **** 		// Return Software Version
 725:main.c        **** 		} 
 726:main.c        **** 		else if (val == 'V') {
 727:main.c        **** 		sendchar(VERSION_HIGH);
 728:main.c        **** 		sendchar(VERSION_LOW);
 729:main.c        **** 
 730:main.c        **** 		// Return Signature Bytes (it seems that 
 731:main.c        **** 		// AVRProg expects the "Atmel-byte" 0x1E last
 732:main.c        **** 		// but shows it first in the dialog-window)
 733:main.c        **** 		} 
 734:main.c        **** 		else if (val == 's') 
 735:main.c        **** 		{
 736:main.c        **** 		sendchar(SIG_BYTE3);
 737:main.c        **** 		sendchar(SIG_BYTE2);
 738:main.c        **** 		sendchar(SIG_BYTE1);
 739:main.c        **** 
 740:main.c        **** 		/* ESC */
 741:main.c        **** 		} 
 742:main.c        **** 		else if(val != 0x1b) 
 743:main.c        **** 		{
 744:main.c        **** 		sendchar('?');
 745:main.c        **** 		}
 746:main.c        **** 
 747:main.c        **** 	
 748:main.c        **** 	} 
 749:main.c        **** 
 750:main.c        **** 	
 751:main.c        **** 
 752:main.c        **** 	return 0;
 753:main.c        **** }
 754:main.c        **** 
 755:main.c        **** void Buzzer_End0(void)
 756:main.c        **** {
 757:main.c        **** 
 758:main.c        **** 		PORT_BUZ|=(1<<BUZ);
 759:main.c        **** 		_delay_ms(300);
 172               	8,0,759,.LM9-.LFBB3
 173               	.LM9:
 174               	.LFBB3:
 175               	/* prologue: function */
 176               	/* frame size = 0 */
 760:main.c        **** 
 761:main.c        **** 		PORT_BUZ&=~(1<<BUZ);
 177               	bn	68,0,761,.LM10-.LFBB3
 178               	.LM10:
 179 0022 409A      		sbi 40-32,0
 180 0024 88EB      		ldi r24,lo8(3000)
 181 0026 9BE0      		ldi r25,hi8(3000)
 182               	.LBB143:
 183               	.LBB144:
 184               	.LBB145:
 185               	.LBB146:
 187               	.Ltext3:
 189               	.LM11:
 190 0028 28EB      		ldi r18,lo8(184)
 191 002a 30E0      		ldi r19,hi8(184)
 192               	.L8:
 193 002c F901      		movw r30,r18
 194               	/* #APP */
 195               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 196 002e 3197      		1: sbiw r30,1
 197 0030 01F4      		brne 1b
 198               	 ;  0 "" 2
 199               	/* #NOAPP */
 200               	.LBE146:
 201               	.LBE145:
 203               	.Ltext4:
   1:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    All rights reserved.
   5:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
   6:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
   9:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  12:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****      distribution.
  16:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  17:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  21:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  33:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** /* $Id: delay.h,v 1.5.2.1 2009/02/25 10:14:03 joerg_wunsch Exp $ */
  34:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  35:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  38:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #include <inttypes.h>
  39:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  40:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  41:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** /** \file */
  42:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  43:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     \code
  44:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  45:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  46:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     #include <util/delay.h>
  47:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     \endcode
  48:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  49:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  50:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  51:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  52:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     used.
  53:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  54:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  55:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  56:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  57:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  58:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  59:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  60:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  61:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  62:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  63:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  64:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  65:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  66:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  67:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  68:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  69:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  70:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     routines linked into the application.
  71:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  72:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  73:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  74:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  75:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  76:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** */
  77:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  78:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  79:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  80:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  81:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #endif
  82:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  83:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #ifndef F_CPU
  84:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  85:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  86:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  87:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #endif
  88:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  89:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  90:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  91:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #endif
  92:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  93:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** /**
  94:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    \ingroup util_delay
  95:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  96:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
  97:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  98:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
  99:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 100:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
 101:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 102:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
 103:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 104:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 105:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 106:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 107:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 108:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****  */
 109:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** void
 110:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** _delay_ms(double __ms)
 111:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** {
 112:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 	uint16_t __ticks;
 113:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 114:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 115:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = 1;
 116:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 117:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 	{
 118:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 119:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 120:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 		while(__ticks)
 121:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 		{
 122:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 			// wait 1/10 ms
 123:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 124:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 			__ticks --;
 204               	B3
 205               	.LM12:
 206 0032 0197      		sbiw r24,1
 208               	.LM13:
 209 0034 01F4      		brne .L8
 210               	.LBE144:
 211               	.LBE143:
 213               	.Ltext5:
 762:main.c        **** 
 763:main.c        **** 		_delay_ms(100);
 214               	,0,763,.LM14-.LFBB3
 215               	.LM14:
 216 0036 4098      		cbi 40-32,0
 217 0038 88EE      		ldi r24,lo8(1000)
 218 003a 93E0      		ldi r25,hi8(1000)
 219               	.LBB147:
 220               	.LBB148:
 221               	.LBB149:
 222               	.LBB150:
 224               	.Ltext6:
 226               	.LM15:
 227 003c 28EB      		ldi r18,lo8(184)
 228 003e 30E0      		ldi r19,hi8(184)
 229               	.L9:
 230 0040 F901      		movw r30,r18
 231               	/* #APP */
 232               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 233 0042 3197      		1: sbiw r30,1
 234 0044 01F4      		brne 1b
 235               	 ;  0 "" 2
 236               	/* #NOAPP */
 237               	.LBE150:
 238               	.LBE149:
 240               	.Ltext7:
 242               	.LM16:
 243 0046 0197      		sbiw r24,1
 245               	.LM17:
 246 0048 01F4      		brne .L9
 247               	.LBE148:
 248               	.LBE147:
 250               	.Ltext8:
 764:main.c        **** 
 765:main.c        **** 		PORT_BUZ|=(1<<BUZ);
 251               		sbi 40-32,0
 252               		ldi r24,lo8(2000)
 253 004a 409A      		ldi r25,hi8(2000)
 254 004c 80ED      	.LBB151:
 255 004e 97E0      	.LBB152:
 256               	.LBB153:
 257               	.LBB154:
 259               	.Ltext9:
 261               	.LM19:
 262               		ldi r18,lo8(184)
 263               		ldi r19,hi8(184)
 264 0050 28EB      	.L10:
 265 0052 30E0      		movw r30,r18
 266               	/* #APP */
 267 0054 F901      	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 268               		1: sbiw r30,1
 269               		brne 1b
 270 0056 3197      	 ;  0 "" 2
 271 0058 01F4      	/* #NOAPP */
 272               	.LBE154:
 273               	.LBE153:
 275               	.Ltext10:
 277               	.LM20:
 278               		sbiw r24,1
 280 005a 0197      	.LM21:
 281               		brne .L10
 282               	.LBE152:
 283 005c 01F4      	.LBE151:
 285               	.Ltext11:
 287               	.LM22:
 766:main.c        **** 
 767:main.c        **** 		_delay_ms(200);
 288               	LFBB3
 289               	.LM23:
 290 005e 4098      		sbi 40-32,0
 768:main.c        **** 
 291               	i r24,lo8(1000)
 292               		ldi r25,hi8(1000)
 293 0060 409A      	.LBB155:
 294 0062 88EE      	.LBB156:
 295 0064 93E0      	.LBB157:
 296               	.LBB158:
 298               	.Ltext12:
 300               	.LM24:
 301               		ldi r18,lo8(184)
 302               		ldi r19,hi8(184)
 303               	.L11:
 304 0066 28EB      		movw r30,r18
 305 0068 30E0      	/* #APP */
 306               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 307 006a F901      		1: sbiw r30,1
 308               		brne 1b
 309               	 ;  0 "" 2
 310 006c 3197      	/* #NOAPP */
 311 006e 01F4      	.LBE158:
 312               	.LBE157:
 314               	.Ltext13:
 316               	.LM25:
 317               		sbiw r24,1
 319               	.LM26:
 320 0070 0197      		brne .L11
 321               	.LBE156:
 322               	.LBE155:
 324               	.Ltext14:
 326               	.LM27:
 327               		cbi 40-32,0
 769:main.c        **** 
 770:main.c        **** 		PORT_BUZ&=~(1<<BUZ);
 328               	
 329               	.LBB159:
 330 0074 4098      	.LBB160:
 331 0076 88EB      	.LBB161:
 332 0078 9BE0      	.LBB162:
 334               	.Ltext15:
 336               	.LM28:
 337               		ldi r18,lo8(184)
 338               		ldi r19,hi8(184)
 339               	.L12:
 340               		movw r30,r18
 341 007a 28EB      	/* #APP */
 342 007c 30E0      	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 343               		1: sbiw r30,1
 344 007e F901      		brne 1b
 345               	 ;  0 "" 2
 346               	/* #NOAPP */
 347 0080 3197      	.LBE162:
 348 0082 01F4      	.LBE161:
 350               	.Ltext16:
 352               	.LM29:
 353               		sbiw r24,1
 355               	.LM30:
 356               		brne .L12
 357 0084 0197      	.LBE160:
 358               	.LBE159:
 360 0086 01F4      	.Ltext17:
 362               	.LM31:
 363               		cbi 40-32,0
 364               		ldi r24,lo8(1000)
 771:main.c        **** 
 772:main.c        **** 		PORT_BUZ|=(1<<BUZ);
 365               	
 366               	.LBB165:
 367 0088 4098      	.LBB166:
 369 008c 93E0      	.Ltext18:
 371               	.LM32:
 372               		ldi r18,lo8(184)
 373               		ldi r19,hi8(184)
 374               	.L13:
 375               		movw r30,r18
 376               	/* #APP */
 377               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 378 008e 28EB      		1: sbiw r30,1
 379 0090 30E0      		brne 1b
 380               	 ;  0 "" 2
 381 0092 F901      	/* #NOAPP */
 382               	.LBE166:
 383               	.LBE165:
 385 0096 01F4      	.Ltext19:
 387               	.LM33:
 388               		sbiw r24,1
 390               	.LM34:
 391               		brne .L13
 392               	.LBE164:
 393               	.LBE163:
 395               	.Ltext20:
 397 009a 01F4      	.LM35:
 398               		sbi 40-32,0
 399               		ldi r24,lo8(3000)
 400               		ldi r25,hi8(3000)
 401               	.LBB167:
 773:main.c        **** 
 774:main.c        **** 		_delay_ms(100);
 402               	c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h",132,0,0,.Ltext21
 403               	.Ltext21:
 405 009e 88EB      	.LM36:
 406 00a0 9BE0      		ldi r18,lo8(184)
 407               		ldi r19,hi8(184)
 408               	.L14:
 409               		movw r30,r18
 410               	/* #APP */
 411               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 412               		1: sbiw r30,1
 413               		brne 1b
 414               	 ;  0 "" 2
 415 00a2 28EB      	/* #NOAPP */
 416 00a4 30E0      	.LBE170:
 417               	.LBE169:
 419               	.Ltext22:
 421 00a8 3197      	.LM37:
 422 00aa 01F4      		sbiw r24,1
 424               	.LM38:
 425               		brne .L14
 426               	.LBE168:
 427               	.LBE167:
 429               	.Ltext23:
 431 00ac 0197      	.LM39:
 432               		cbi 40-32,0
 434 00ae 01F4      	.LM40:
 435               		cbi 39-32,0
 436               	/* epilogue start */
 438               	.LM41:
 775:main.c        **** 
 776:main.c        **** 		PORT_BUZ&=~(1<<BUZ);
 439               	0
 777:main.c        **** 
 778:main.c        **** 		_delay_ms(300);
 442               	tabs	"__count:r(1,4)",64,0,0,30
 779:main.c        **** 
 780:main.c        **** 		PORT_BUZ&=~(1<<BUZ);
 446               	abs	"__ticks:r(1,4)",64,0,0,24
 482               	.Lscope3:
 484               	.global	Buzzer_Enter0
 486               	Buzzer_Enter0:
 488               	.LM42:
 489               	.LFBB4:
 490               	/* prologue: function */
 491               	/* frame size = 0 */
 493               	.LM43:
 494               		sbi 40-32,0
 495               		ldi r24,lo8(1500)
 496               		ldi r25,hi8(1500)
 781:main.c        **** 
 782:main.c        **** 		_delay_ms(100);
 783:main.c        **** 		PORT_BUZ|=(1<<BUZ);
 497               	avr-20100110/lib/gcc/../../avr/include/util/delay_basic.h",132,0,0,.Ltext24
 498               	.Ltext24:
 500               	.LM44:
 501               		ldi r18,lo8(184)
 784:main.c        **** 
 785:main.c        **** 		_delay_ms(300);
 502               	r19,hi8(184)
 503               	.L24:
 504 00b6 409A      		movw r30,r18
 505 00b8 8CED      	/* #APP */
 506 00ba 95E0      	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 507               		1: sbiw r30,1
 508               		brne 1b
 509               	 ;  0 "" 2
 510               	/* #NOAPP */
 511               	.LBE174:
 512               	.LBE173:
 514               	.Ltext25:
 516 00be 30E0      	.LM45:
 517               		sbiw r24,1
 519               	.LM46:
 520               		brne .L24
 521 00c2 3197      	.LBE172:
 522 00c4 01F4      	.LBE171:
 524               	.Ltext26:
 526               	.LM47:
 527               		cbi 40-32,0
 528               		ldi r24,lo8(4500)
 529               		ldi r25,hi8(4500)
 530               	.LBB175:
 531 00c6 0197      	.LBB176:
 532               	.LBB177:
 533               	.LBB178:
 535               	.Ltext27:
 537               	.LM48:
 538               		ldi r18,lo8(184)
 786:main.c        **** 
 787:main.c        **** 		PORT_BUZ&=~(1<<BUZ);
 539               	
 540               	/* #APP */
 541 00ca 4098      	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 542 00cc 84E9      		1: sbiw r30,1
 543 00ce 91E1      		brne 1b
 544               	 ;  0 "" 2
 545               	/* #NOAPP */
 546               	.LBE178:
 547               	.LBE177:
 549               	.Ltext28:
 551               	.LM49:
 552 00d0 28EB      		sbiw r24,1
 554               	.LM50:
 555 00d4 F901      		brne .L25
 556               	.LBE176:
 557               	.LBE175:
 559 00d8 01F4      	.Ltext29:
 561               	.LM51:
 562               		sbi 40-32,0
 563               		ldi r24,lo8(1500)
 564               		ldi r25,hi8(1500)
 565               	.LBB179:
 566               	.LBB180:
 567               	.LBB181:
 568 00da 0197      	.LBB182:
 570               	.Ltext30:
 572               	.LM52:
 573               		ldi r18,lo8(184)
 574               		ldi r19,hi8(184)
 575               	.L26:
 788:main.c        **** 
 789:main.c        **** 
 576               	/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 577               		1: sbiw r30,1
 578 00de 409A      		brne 1b
 579 00e0 8CED      	 ;  0 "" 2
 580 00e2 95E0      	/* #NOAPP */
 581               	.LBE182:
 582               	.LBE181:
 584               	.Ltext31:
 586               	.LM53:
 587               		sbiw r24,1
 589 00e4 28EB      	.LM54:
 590 00e6 30E0      		brne .L26
 591               	.LBE180:
 592 00e8 F901      	.LBE179:
 594               	.Ltext32:
 596 00ec 01F4      	.LM55:
 597               		cbi 40-32,0
 598               		ldi r24,lo8(4500)
 599               		ldi r25,hi8(4500)
 600               	.LBB183:
 601               	.LBB184:
 602               	.LBB185:
 603               	.LBB186:
 605 00ee 0197      	.Ltext33:
 607               	.LM56:
 608 00f0 01F4      		ldi r18,lo8(184)
 609               		ldi r19,hi8(184)
 610               	.L27:
 611               		movw r30,r18
 612               	/* #APP */
 790:main.c        **** 
 791:main.c        **** 		DDR_BUZ&=~(1<<BUZ); //Buzzer OFF.
 613               	./../avr/include/util/delay_basic.h" 1
 614               		1: sbiw r30,1
 615 00f2 4098      		brne 1b
 616 00f4 84E9      	 ;  0 "" 2
 617 00f6 91E1      	/* #NOAPP */
 618               	.LBE186:
 619               	.LBE185:
 621               	.Ltext34:
 623               	.LM57:
 624               		sbiw r24,1
 626 00f8 28EB      	.LM58:
 627 00fa 30E0      		brne .L27
 628               	.LBE184:
 629 00fc F901      	.LBE183:
 631               	.Ltext35:
 633 0100 01F4      	.LM59:
 634               		sbi 40-32,0
 635               		ldi r24,lo8(3000)
 636               		ldi r25,hi8(3000)
 637               	.LBB187:
 638               	.LBB188:
 639               	.LBB189:
 640               	.LBB190:
 642 0102 0197      	.Ltext36:
 644               	.LM60:
 645 0104 01F4      		ldi r18,lo8(184)
 646               		ldi r19,hi8(184)
 647               	.L28:
 648               		movw r30,r18
 649               	/* #APP */
 792:main.c        **** 
 793:main.c        **** 
 650               	./../avr/include/util/delay_basic.h" 1
 651               		1: sbiw r30,1
 652 0106 409A      		brne 1b
 653 0108 88EB      	 ;  0 "" 2
 654 010a 9BE0      	/* #NOAPP */
 655               	.LBE190:
 656               	.LBE189:
 658               	.Ltext37:
 660               	.LM61:
 661               		sbiw r24,1
 663 010c 28EB      	.LM62:
 664 010e 30E0      		brne .L28
 665               	.LBE188:
 666 0110 F901      	.LBE187:
 668               	.Ltext38:
 670 0114 01F4      	.LM63:
 671               		cbi 40-32,0
 672               	/* epilogue start */
 674               	.LM64:
 675               		ret
 794:main.c        **** 
 795:main.c        **** }
 687               	n	224,0,0,.LBE176-.LFBB4
 796:main.c        **** 
 691               	abn	192,0,0,.LBB181-.LFBB4
 706               	.Lscope4:
 708               	.global	main
 710               	main:
 712               	.LM65:
 713               	.LFBB5:
 714               		push r2
 715               		push r3
 716               		push r4
 717               		push r5
 718               		push r6
 719               		push r7
 720               		push r8
 721               		push r9
 722               		push r10
 723               		push r11
 724               		push r12
 725               		push r13
 726               		push r14
 727               		push r15
 728               		push r16
 729               		push r17
 730               		push r28
 731               		push r29
 732               	/* prologue: function */
 733 011e 2F92      	/* frame size = 0 */
 735 0122 4F92      	.LM66:
 736 0124 5F92      		sbi 42-32,3
 738 0128 7F92      	.LM67:
 739 012a 8F92      		cbi 43-32,3
 741 012e AF92      	.LM68:
 742 0130 BF92      		sbi 37-32,0
 744 0134 DF92      	.LM69:
 745 0136 EF92      		sbi 36-32,0
 747 013a 0F93      	.LM70:
 748 013c 1F93      		sbi 39-32,0
 750 0140 DF93      	.LM71:
 751               	/* #APP */
 752               	 ;  376 "main.c" 1
 753               		cli
 754               	 ;  0 "" 2
 756               	.LM72:
 757               	 ;  377 "main.c" 1
 758 0144 5B98      		wdr
 759               	 ;  0 "" 2
 761 0146 289A      	.LM73:
 762               	/* #NOAPP */
 763               		ldi r18,lo8(15)
 764 0148 209A      		ldi r24,lo8(24)
 765               		ldi r25,hi8(24)
 766               	/* #APP */
 767 014a 389A      	 ;  378 "main.c" 1
 768               		in __tmp_reg__,__SREG__
 769               		cli
 770               		wdr
 771               		sts 96,r24
 772 014c F894      		out __SREG__,__tmp_reg__
 773               		sts 96,r18
 774               		
 775               	 ;  0 "" 2
 777 014e A895      	.LM74:
 778               	/* #NOAPP */
 779               		cbi 36-32,1
 781               	.LM75:
 782 0150 2FE0      		sbi 37-32,1
 784 0154 90E0      	.LM76:
 785               		sts 197,__zero_reg__
 787 0156 0FB6      	.LM77:
 788 0158 F894      		ldi r24,lo8(47)
 789 015a A895      		sts 196,r24
 791 0160 0FBE      	.LM78:
 792 0162 2093 6000 		ldi r24,lo8(2)
 793               		sts 192,r24
 795               	.LM79:
 796               		ldi r24,lo8(24)
 797               		sts 193,r24
 799               	.LM80:
 800               		ldi r24,lo8(6)
 801 0168 299A      		sts 194,r24
 803               	.LM81:
 804 016a 1092 C500 		sbis 35-32,1
 805               		rjmp .L36
 807 016e 8FE2      	.LM82:
 808 0170 8093 C400 	/* #APP */
 809               	 ;  473 "main.c" 1
 810               		wdr
 811 0174 82E0      	 ;  0 "" 2
 813               	.LM83:
 814               	/* #NOAPP */
 815 017a 88E1      		cbi 37-32,1
 817               	.LM84:
 818               		lds r24,192
 819 0180 86E0      		andi r24,lo8(-3)
 820 0182 8093 C200 		sts 192,r24
 822               	.LM85:
 823 0186 199B      		cbi 37-32,0
 825               	.LM86:
 826               		cbi 36-32,0
 828               	.LM87:
 829 018a A895      		cbi 39-32,0
 831               	.LM88:
 832               		ldi r30,lo8(0)
 833               		ldi r31,hi8(0)
 834 018c 2998      		icall
 835               	.L36:
 837 018e 8091 C000 	.LM89:
 838 0192 8D7F      	/* #APP */
 839 0194 8093 C000 	 ;  534 "main.c" 1
 840               		wdr
 841               	 ;  0 "" 2
 842 0198 2898      	/* #NOAPP */
 843               		ldi r24,lo8(10000)
 844               		ldi r25,hi8(10000)
 845 019a 2098      	.LBB191:
 846               	.LBB192:
 847               	.LBB193:
 848 019c 3898      	.LBB194:
 850               	.Ltext39:
 852 01a0 F0E0      	.LM90:
 853 01a2 0995      		ldi r18,lo8(184)
 854               		ldi r19,hi8(184)
 855               	.L37:
 856               		movw r30,r18
 857               	/* #APP */
 858               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 859 01a4 A895      		1: sbiw r30,1
 860               		brne 1b
 861               	 ;  0 "" 2
 862 01a6 80E1      	/* #NOAPP */
 863 01a8 97E2      	.LBE194:
 864               	.LBE193:
 866               	.Ltext40:
 868               	.LM91:
 869               		sbiw r24,1
 871               	.LM92:
 872 01aa 28EB      		brne .L37
 873 01ac 30E0      	.LBE192:
 874               	.LBE191:
 876               	.Ltext41:
 878 01b0 3197      	.LM93:
 879 01b2 01F4      	/* #APP */
 880               	 ;  536 "main.c" 1
 881               		wdr
 882               	 ;  0 "" 2
 883               	/* #NOAPP */
 884               		ldi r24,lo8(10000)
 885               		ldi r25,hi8(10000)
 886               	.LBB195:
 887               	.LBB196:
 888 01b4 0197      	.LBB197:
 889               	.LBB198:
 891 01b6 01F4      	.Ltext42:
 893               	.LM94:
 894               		ldi r18,lo8(184)
 895               		ldi r19,hi8(184)
 896               	.L38:
 897               		movw r30,r18
 898               	/* #APP */
 899               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 900 01b8 A895      		1: sbiw r30,1
 901               		brne 1b
 902               	 ;  0 "" 2
 903 01ba 80E1      	/* #NOAPP */
 904 01bc 97E2      	.LBE198:
 905               	.LBE197:
 907               	.Ltext43:
 909               	.LM95:
 910               		sbiw r24,1
 912               	.LM96:
 913 01be 28EB      		brne .L38
 914 01c0 30E0      	.LBE196:
 915               	.LBE195:
 917               	.Ltext44:
 919 01c4 3197      	.LM97:
 920 01c6 01F4      	/* #APP */
 921               	 ;  538 "main.c" 1
 922               		wdr
 923               	 ;  0 "" 2
 925               	.LM98:
 926               	/* #NOAPP */
 927               		rcall Buzzer_Enter0
 929 01c8 0197      	.LM99:
 930               	/* #APP */
 931               	 ;  540 "main.c" 1
 932 01ca 01F4      		wdr
 933               	 ;  0 "" 2
 934               	/* #NOAPP */
 935               		clr r12
 936               		clr r13
 937               		clr r10
 938               	.LBB199:
 939               	.LBB200:
 940               	.LBB201:
 942               	.LM100:
 943               		clr r4
 944               		inc r4
 946 01ce 00D0      	.LM101:
 947               		ldi r26,lo8(5)
 948               		mov r3,r26
 950               	.LM102:
 951 01d0 A895      		ldi r31,lo8(17)
 952               		mov r5,r31
 953               	.LBE201:
 954 01d2 CC24      	.LBE200:
 955 01d4 DD24      	.LBE199:
 956 01d6 AA24      	.LBB217:
 957               	.LBB218:
 959               	.LM103:
 960               		ldi r30,lo8(3)
 961               		mov r2,r30
 962 01d8 4424      	.L114:
 963 01da 4394      	.LBE218:
 964               	.LBE217:
 966 01dc A5E0      	.LM104:
 967 01de 3A2E      	/* #APP */
 968               	 ;  546 "main.c" 1
 969               		wdr
 970 01e0 F1E1      	 ;  0 "" 2
 971 01e2 5F2E      	/* #NOAPP */
 972               		rjmp .L39
 973               	.L40:
 974               	.LBB221:
 975               	.LBB222:
 977               	.LM105:
 978               	/* #APP */
 979 01e4 E3E0      	 ;  191 "main.c" 1
 980 01e6 2E2E      		wdr
 981               	 ;  0 "" 2
 982               	/* #NOAPP */
 983               	.L39:
 984               		lds r24,192
 985               		sbrs r24,7
 986               		rjmp .L40
 988 01e8 A895      	.LM106:
 989               		lds r25,198
 990               	.LBE222:
 991 01ea 00C0      	.LBE221:
 993               	.LM107:
 994               		cpi r25,lo8(97)
 995               		brne .L41
 997               	.LM108:
 998               		ldi r24,lo8(89)
 999 01ec A895      		rjmp .L120
 1000               	.L41:
 1002               	.LM109:
 1003 01ee 8091 C000 		cpi r25,lo8(65)
 1004 01f2 87FF      		brne .L115
 1005 01f4 00C0      		rjmp .L107
 1006               	.L45:
 1007               	.LBB223:
 1008 01f6 9091 C600 	.LBB224:
 1010               	.LM110:
 1011               	/* #APP */
 1012               	 ;  191 "main.c" 1
 1013 01fa 9136      		wdr
 1014 01fc 01F4      	 ;  0 "" 2
 1015               	/* #NOAPP */
 1016               	.L107:
 1017 01fe 89E5      		lds r24,192
 1018 0200 00C0      		sbrs r24,7
 1019               		rjmp .L45
 1021               	.LM111:
 1022 0202 9134      		lds r25,198
 1023 0204 01F4      		rjmp .L46
 1024 0206 00C0      	.L47:
 1025               	.LBE224:
 1026               	.LBE223:
 1027               	.LBB225:
 1028               	.LBB226:
 1030               	.LM112:
 1031               	/* #APP */
 1032 0208 A895      	 ;  191 "main.c" 1
 1033               		wdr
 1034               	 ;  0 "" 2
 1035               	/* #NOAPP */
 1036 020a 8091 C000 	.L46:
 1037 020e 87FF      		lds r24,192
 1038 0210 00C0      		sbrs r24,7
 1039               		rjmp .L47
 1041 0212 9091 C600 	.LM113:
 1042 0216 00C0      		lds r24,198
 1043               	.LBE226:
 1044               	.LBE225:
 1046               	.LM114:
 1047               		mov r7,r25
 1048               		clr r6
 1049               		mov r12,r24
 1050               		clr r13
 1051               		or r12,r6
 1052 0218 A895      		or r13,r7
 1053               		rjmp .L121
 1054               	.L115:
 1056 021a 8091 C000 	.LM115:
 1057 021e 87FF      		cpi r25,lo8(98)
 1058 0220 00C0      		brne .L48
 1060               	.LM116:
 1061 0222 8091 C600 		ldi r24,lo8(89)
 1062               		rcall sendchar
 1064               	.LM117:
 1065               		ldi r24,lo8(0)
 1066 0226 792E      		rcall sendchar
 1068 022a C82E      	.LM118:
 1069 022c DD24      		ldi r24,lo8(64)
 1070 022e C628      		rjmp .L120
 1071 0230 D728      	.L48:
 1073               	.LM119:
 1074               		cpi r25,lo8(66)
 1075               		breq .+2
 1076 0234 9236      		rjmp .L116
 1077 0236 01F4      		rjmp .L108
 1078               	.L51:
 1079               	.LBB227:
 1080 0238 89E5      	.LBB204:
 1081 023a 00D0      	.LBB205:
 1083               	.LM120:
 1084 023c 80E0      	/* #APP */
 1085 023e 00D0      	 ;  191 "main.c" 1
 1086               		wdr
 1087               	 ;  0 "" 2
 1088 0240 80E4      	/* #NOAPP */
 1089 0242 00C0      	.L108:
 1090               		lds r24,192
 1091               		sbrs r24,7
 1092               		rjmp .L51
 1094 0246 01F0      	.LM121:
 1095 0248 00C0      		lds r24,198
 1096 024a 00C0      		rjmp .L52
 1097               	.L53:
 1098               	.LBE205:
 1099               	.LBE204:
 1100               	.LBB206:
 1101               	.LBB207:
 1103               	.LM122:
 1104               	/* #APP */
 1105 024c A895      	 ;  191 "main.c" 1
 1106               		wdr
 1107               	 ;  0 "" 2
 1108               	/* #NOAPP */
 1109 024e 8091 C000 	.L52:
 1110 0252 87FF      		lds r24,192
 1111 0254 00C0      		sbrs r24,7
 1112               		rjmp .L53
 1114 0256 8091 C600 	.LM123:
 1115 025a 00C0      		lds r17,198
 1116               		rjmp .L54
 1117               	.L55:
 1118               	.LBE207:
 1119               	.LBE206:
 1120               	.LBB208:
 1121               	.LBB209:
 1123               	.LM124:
 1124               	/* #APP */
 1125 025c A895      	 ;  191 "main.c" 1
 1126               		wdr
 1127               	 ;  0 "" 2
 1128               	/* #NOAPP */
 1129 025e 8091 C000 	.L54:
 1130 0262 87FF      		lds r24,192
 1131 0264 00C0      		sbrs r24,7
 1132               		rjmp .L55
 1134 0266 1091 C600 	.LM125:
 1135 026a 00C0      		lds r18,198
 1136               		ldi r25,lo8(0)
 1137               		ldi r30,lo8(gBuffer)
 1138               		ldi r31,hi8(gBuffer)
 1139               	.L60:
 1140               	.LBE209:
 1141               	.LBE208:
 1142               	.LBB210:
 1143               	.LBB211:
 1145 026c A895      	.LM126:
 1146               		cp r25,r17
 1147               		brlo .L109
 1148               		ldi r24,lo8(-1)
 1149 026e 8091 C000 		rjmp .L57
 1150 0272 87FF      	.L58:
 1151 0274 00C0      	.LBB212:
 1152               	.LBB213:
 1154 0276 2091 C600 	.LM127:
 1155 027a 90E0      	/* #APP */
 1156 027c E0E0      	 ;  191 "main.c" 1
 1157 027e F0E0      		wdr
 1158               	 ;  0 "" 2
 1159               	/* #NOAPP */
 1160               	.L109:
 1161               		lds r24,192
 1162               		sbrs r24,7
 1163               		rjmp .L58
 1165 0280 9117      	.LM128:
 1166 0282 00F0      		lds r24,198
 1167 0284 8FEF      	.L57:
 1168 0286 00C0      	.LBE213:
 1169               	.LBE212:
 1171               	.LM129:
 1172               		st Z,r24
 1174               	.LM130:
 1175               		subi r25,lo8(-(1))
 1176 0288 A895      		cpi r25,lo8(64)
 1177               		breq .L59
 1179               	.LM131:
 1180 028a 8091 C000 		adiw r30,1
 1181 028e 87FF      		rjmp .L60
 1182 0290 00C0      	.L59:
 1183               	.LBE211:
 1184               	.LBE210:
 1186               	.LM132:
 1187               		ldi r24,lo8(119)
 1188               		cp r10,r24
 1189               		breq .+2
 1190               		rjmp .L122
 1192               	.LM133:
 1193               		cpi r18,lo8(70)
 1194 0298 9F5F      		brne .L62
 1195 029a 9034      	.LBB214:
 1196 029c 01F0      	.LBB202:
 1198               	.LM134:
 1199 029e 3196      		clr r14
 1200 02a0 00C0      		clr r15
 1201               		lsl r12
 1202               		rol r13
 1203               		rol r14
 1204               		rol r15
 1205               		movw r20,r14
 1206 02a2 87E7      		movw r18,r12
 1207 02a4 A816      		ldi r26,lo8(gBuffer)
 1208 02a6 01F0      		ldi r27,hi8(gBuffer)
 1209 02a8 00C0      	.L63:
 1211               	.LM135:
 1212 02aa 2634      		ld r24,X
 1213 02ac 01F4      		ldi r25,lo8(0)
 1215               	.LM136:
 1216               		adiw r26,1
 1217               		ld r9,X
 1218 02ae EE24      		sbiw r26,1
 1219 02b0 FF24      		clr r8
 1220 02b2 CC0C      		or r24,r8
 1221 02b4 DD1C      		or r25,r9
 1223 02b8 FF1C      	.LM137:
 1224 02ba A701      		adiw r26,2
 1226 02be A0E0      	.LM138:
 1227 02c0 B0E0      		movw r30,r18
 1228               	/* #APP */
 1229               	 ;  231 "main.c" 1
 1230               		movw  r0, r24
 1231 02c2 8C91      		sts 87, r4
 1232 02c4 90E0      		spm
 1233               		clr  r1
 1234               		
 1235 02c6 1196      	 ;  0 "" 2
 1237 02ca 1197      	.LM139:
 1238 02cc 8824      	/* #NOAPP */
 1239 02ce 8829      		subi r18,lo8(-(2))
 1240 02d0 9929      		sbci r19,hi8(-(2))
 1241               		sbci r20,hlo8(-(2))
 1242               		sbci r21,hhi8(-(2))
 1244               	.LM140:
 1245               		subi r17,lo8(-(-2))
 1247               	.LM141:
 1248               		brne .L63
 1250 02d8 4092 5700 	.LM142:
 1251 02dc E895      		movw r30,r12
 1252 02de 1124      	/* #APP */
 1253               	 ;  238 "main.c" 1
 1254               		sts 87, r3
 1255               		spm
 1256               		
 1257               	 ;  0 "" 2
 1258 02e0 2E5F      	/* #NOAPP */
 1259 02e2 3F4F      	.L64:
 1260 02e4 4F4F      	.LBE202:
 1262               	.LM143:
 1263               		in __tmp_reg__,87-32
 1264 02e8 1250      		sbrc __tmp_reg__,0
 1265               		rjmp .L64
 1266               	.LBB203:
 1268               	.LM144:
 1269               	/* #APP */
 1270 02ec F601      	 ;  240 "main.c" 1
 1271               		sts 87, r5
 1272               		spm
 1273 02ee 3092 5700 		
 1274 02f2 E895      	 ;  0 "" 2
 1276               	.LM145:
 1277               	/* #NOAPP */
 1278               		lsr r21
 1279               		ror r20
 1280               		ror r19
 1281               		ror r18
 1282 02f4 07B6      		movw r12,r18
 1283 02f6 00FC      		rjmp .L121
 1284 02f8 00C0      	.L62:
 1285               	.LBE203:
 1286               	.LBE214:
 1288               	.LM146:
 1289               		cpi r18,lo8(69)
 1290 02fa 5092 5700 		breq .+2
 1291 02fe E895      		rjmp .L121
 1292               		mov r16,r17
 1293               		movw r14,r12
 1294               		ldi r28,lo8(gBuffer)
 1295               		ldi r29,hi8(gBuffer)
 1296               	.L66:
 1297 0300 5695      	.LBB215:
 1298 0302 4795      	.LBB216:
 1300 0306 2795      	.LM147:
 1301 0308 6901      		ld r22,Y+
 1302 030a 00C0      		movw r24,r14
 1303               		rcall __eewr_byte_m88
 1305               	.LM148:
 1306               		sec
 1307               		adc r14,__zero_reg__
 1308 030c 2534      		adc r15,__zero_reg__
 1310 0310 00C0      	.LM149:
 1311 0312 012F      		subi r16,lo8(-(-1))
 1313 0316 C0E0      	.LM150:
 1314 0318 D0E0      		brne .L66
 1315               		subi r17,lo8(-(-1))
 1316               		mov r24,r17
 1317               		ldi r25,lo8(0)
 1318               		adiw r24,1
 1319               		add r12,r24
 1320 031a 6991      		adc r13,r25
 1321 031c C701      		rjmp .L121
 1322 031e 00D0      	.L116:
 1323               	.LBE216:
 1324               	.LBE215:
 1325 0320 0894      	.LBE227:
 1327 0324 F11C      	.LM151:
 1328               		cpi r25,lo8(103)
 1329               		breq .+2
 1330 0326 0150      		rjmp .L117
 1331               		rjmp .L110
 1332               	.L69:
 1333 0328 01F4      	.LBB228:
 1334 032a 1150      	.LBB229:
 1335 032c 812F      	.LBB230:
 1337 0330 0196      	.LM152:
 1338 0332 C80E      	/* #APP */
 1339 0334 D91E      	 ;  191 "main.c" 1
 1340 0336 00C0      		wdr
 1341               	 ;  0 "" 2
 1342               	/* #NOAPP */
 1343               	.L110:
 1344               		lds r24,192
 1345               		sbrs r24,7
 1346               		rjmp .L69
 1348 033a 01F0      	.LM153:
 1349 033c 00C0      		lds r24,198
 1350 033e 00C0      		rjmp .L70
 1351               	.L71:
 1352               	.LBE230:
 1353               	.LBE229:
 1354               	.LBB231:
 1355               	.LBB232:
 1357               	.LM154:
 1358               	/* #APP */
 1359 0340 A895      	 ;  191 "main.c" 1
 1360               		wdr
 1361               	 ;  0 "" 2
 1362               	/* #NOAPP */
 1363 0342 8091 C000 	.L70:
 1364 0346 87FF      		lds r24,192
 1365 0348 00C0      		sbrs r24,7
 1366               		rjmp .L71
 1368 034a 8091 C600 	.LM155:
 1369 034e 00C0      		lds r11,198
 1370               		rjmp .L72
 1371               	.L73:
 1372               	.LBE232:
 1373               	.LBE231:
 1374               	.LBB233:
 1375               	.LBB234:
 1377               	.LM156:
 1378               	/* #APP */
 1379 0350 A895      	 ;  191 "main.c" 1
 1380               		wdr
 1381               	 ;  0 "" 2
 1382               	/* #NOAPP */
 1383 0352 8091 C000 	.L72:
 1384 0356 87FF      		lds r24,192
 1385 0358 00C0      		sbrs r24,7
 1386               		rjmp .L73
 1388 035a B090 C600 	.LM157:
 1389 035e 00C0      		lds r24,198
 1390               	.LBE234:
 1391               	.LBE233:
 1393               	.LM158:
 1394               		cpi r24,lo8(70)
 1395               		brne .L74
 1396               	.LBB235:
 1397               	.LBB236:
 1399 0360 A895      	.LM159:
 1400               		clr r14
 1401               		clr r15
 1402               		lsl r12
 1403 0362 8091 C000 		rol r13
 1404 0366 87FF      		rol r14
 1405 0368 00C0      		rol r15
 1406               	.L75:
 1407               	.LBB237:
 1409               	.LM160:
 1410               		movw r30,r12
 1411               	/* #APP */
 1412               	 ;  276 "main.c" 1
 1413 036e 8634      		lpm r16, Z+
 1414 0370 01F4      		lpm r17, Z
 1415               		
 1416               	 ;  0 "" 2
 1417               	/* #NOAPP */
 1418               	.LBE237:
 1420 0374 FF24      	.LM161:
 1421 0376 CC0C      		mov r24,r16
 1422 0378 DD1C      		rcall sendchar
 1424 037c FF1C      	.LM162:
 1425               		mov r24,r17
 1426               		rcall sendchar
 1428               	.LM163:
 1429 037e F601      		ldi r24,lo8(2)
 1430               		ldi r25,hi8(2)
 1431               		ldi r26,hlo8(2)
 1432 0380 0591      		ldi r27,hhi8(2)
 1433 0382 1491      		add r12,r24
 1434               		adc r13,r25
 1435               		adc r14,r26
 1436               		adc r15,r27
 1438               	.LM164:
 1439               		ldi r25,lo8(-2)
 1440 0384 802F      		add r11,r25
 1442               	.LM165:
 1443               		brne .L75
 1445 038a 00D0      	.LM166:
 1446               		lsr r15
 1447               		ror r14
 1448 038c 82E0      		ror r13
 1449 038e 90E0      		ror r12
 1450 0390 A0E0      		rjmp .L114
 1451 0392 B0E0      	.L74:
 1452 0394 C80E      	.LBE236:
 1453 0396 D91E      	.LBE235:
 1455 039a FB1E      	.LM167:
 1456               		cpi r24,lo8(69)
 1457               		breq .+2
 1458 039c 9EEF      		rjmp .L114
 1459 039e B90E      		mov r16,r11
 1460               		movw r14,r12
 1461               	.L76:
 1462 03a0 01F4      	.LBB238:
 1463               	.LBB239:
 1465 03a2 F694      	.LM168:
 1466 03a4 E794      	/* #APP */
 1467 03a6 D794      	 ;  307 "main.c" 1
 1468 03a8 C794      		wdr
 1469 03aa 00C0      	 ;  0 "" 2
 1470               	/* #NOAPP */
 1471               	.LBE239:
 1473               	.LM169:
 1474               		movw r24,r14
 1475 03ac 8534      		rcall __eerd_byte_m88
 1476 03ae 01F0      	.LBB240:
 1477 03b0 00C0      		rcall sendchar
 1479 03b4 7601      	.LM170:
 1480               		sec
 1481               		adc r14,__zero_reg__
 1482               		adc r15,__zero_reg__
 1484               	.LM171:
 1485               		subi r16,lo8(-(-1))
 1487 03b6 A895      	.LM172:
 1488               		brne .L76
 1489               		dec r11
 1490               		mov r24,r11
 1491               		ldi r25,lo8(0)
 1492               		adiw r24,1
 1493 03b8 C701      		add r12,r24
 1494 03ba 00D0      		adc r13,r25
 1495               		rjmp .L114
 1496 03bc 00D0      	.L117:
 1497               	.LBE240:
 1498               	.LBE238:
 1499 03be 0894      	.LBE228:
 1501 03c2 F11C      	.LM173:
 1502               		cpi r25,lo8(101)
 1503               		brne .L77
 1505               	.LM174:
 1506               		ldi r26,lo8(119)
 1507 03c6 01F4      		cp r10,r26
 1508 03c8 BA94      		breq .+2
 1509 03ca 8B2D      		rjmp .L121
 1510 03cc 90E0      		ldi r30,lo8(0)
 1511 03ce 0196      		ldi r31,hi8(0)
 1512 03d0 C80E      	.L80:
 1513 03d2 D91E      	.LBB241:
 1514 03d4 00C0      	.LBB219:
 1516               	.LM175:
 1517               	/* #APP */
 1518               	 ;  201 "main.c" 1
 1519               		sts 87, r2
 1520               		spm
 1521 03d6 9536      		
 1522 03d8 01F4      	 ;  0 "" 2
 1523               	/* #NOAPP */
 1524               	.L79:
 1525 03da A7E7      	.LBE219:
 1527 03de 01F0      	.LM176:
 1528 03e0 00C0      		in __tmp_reg__,87-32
 1529 03e2 E0E0      		sbrc __tmp_reg__,0
 1530 03e4 F0E0      		rjmp .L79
 1531               	.LBB220:
 1533               	.LM177:
 1534               	/* #APP */
 1535               	 ;  204 "main.c" 1
 1536               		wdr
 1537               	 ;  0 "" 2
 1538 03e6 2092 5700 	/* #NOAPP */
 1539 03ea E895      		subi r30,lo8(-(64))
 1540               		sbci r31,hi8(-(64))
 1542               	.LM178:
 1543               		ldi r27,hi8(6144)
 1544               		cpi r30,lo8(6144)
 1545               		cpc r31,r27
 1546               		brne .L80
 1548 03ee 00FC      	.LM179:
 1549 03f0 00C0      	/* #APP */
 1550               	 ;  206 "main.c" 1
 1551               		sts 87, r5
 1552               		spm
 1553               		
 1554               	 ;  0 "" 2
 1555 03f2 A895      	/* #NOAPP */
 1556               		rjmp .L121
 1557               	.L77:
 1558 03f4 E05C      	.LBE220:
 1559 03f6 FF4F      	.LBE241:
 1561               	.LM180:
 1562 03f8 B8E1      		cpi r25,lo8(69)
 1563 03fa E030      		brne .L81
 1565 03fe 01F4      	.LM181:
 1566               		cbi 43-32,3
 1568               	.LM182:
 1569               		cbi 42-32,3
 1571 0404 E895      	.LM183:
 1572               	/* #APP */
 1573               	 ;  634 "main.c" 1
 1574               		wdr
 1575 0406 00C0      	 ;  0 "" 2
 1577               	.LM184:
 1578               	/* #NOAPP */
 1579               		rcall Buzzer_End0
 1581 0408 9534      	.LM185:
 1582 040a 01F4      	/* #APP */
 1583               	 ;  638 "main.c" 1
 1584               		wdr
 1585 040c 5B98      	 ;  0 "" 2
 1587               	.LM186:
 1588 040e 5398      	/* #NOAPP */
 1589               		ldi r18,lo8(12)
 1590               		ldi r24,lo8(24)
 1591               		ldi r25,hi8(24)
 1592               	/* #APP */
 1593 0410 A895      	 ;  640 "main.c" 1
 1594               		in __tmp_reg__,__SREG__
 1595               		cli
 1596               		wdr
 1597               		sts 96,r24
 1598 0412 00D0      		out __SREG__,__tmp_reg__
 1599               		sts 96,r18
 1600               		
 1601               	 ;  0 "" 2
 1603 0414 A895      	.LM187:
 1604               	/* #NOAPP */
 1605               		ldi r24,lo8(13)
 1606               		rcall sendchar
 1607               	.L82:
 1608 0416 2CE0      		rjmp .L82
 1609 0418 88E1      	.L81:
 1611               	.LM188:
 1612               		cpi r25,lo8(80)
 1613 041c 0FB6      		breq .L121
 1614 041e F894      	.L83:
 1616 0422 8093 6000 	.LM189:
 1617 0426 0FBE      		cpi r25,lo8(76)
 1618 0428 2093 6000 		breq .L121
 1619               	.L84:
 1621               	.LM190:
 1622               		cpi r25,lo8(112)
 1623               		brne .L85
 1625 042e 00D0      	.LM191:
 1626               		ldi r24,lo8(83)
 1627 0430 00C0      		rjmp .L120
 1628               	.L85:
 1630               	.LM192:
 1631 0432 9035      		cpi r25,lo8(116)
 1632 0434 01F0      		brne .L86
 1634               	.LM193:
 1635               		ldi r24,lo8(119)
 1636 0436 9C34      		rcall sendchar
 1637 0438 01F0      	.L122:
 1639               	.LM194:
 1640               		ldi r24,lo8(0)
 1641 043a 9037      		rjmp .L120
 1642 043c 01F4      	.L86:
 1644               	.LM195:
 1645 043e 83E5      		mov r24,r25
 1646 0440 00C0      		subi r24,lo8(-(-120))
 1647               		cpi r24,lo8(2)
 1648               		brsh .L118
 1649               		rjmp .L112
 1650 0442 9437      	.L89:
 1651 0444 01F4      	.LBB242:
 1652               	.LBB243:
 1654 0446 87E7      	.LM196:
 1655 0448 00D0      	/* #APP */
 1656               	 ;  191 "main.c" 1
 1657               		wdr
 1658               	 ;  0 "" 2
 1659 044a 80E0      	/* #NOAPP */
 1660 044c 00C0      	.L112:
 1661               		lds r24,192
 1662               		sbrs r24,7
 1663               		rjmp .L89
 1665 0450 8857      	.LM197:
 1666 0452 8230      		lds r24,198
 1667 0454 00F4      		rjmp .L121
 1668 0456 00C0      	.L118:
 1669               	.LBE243:
 1670               	.LBE242:
 1672               	.LM198:
 1673               		cpi r25,lo8(84)
 1674               		brne .L119
 1675               		rjmp .L113
 1676 0458 A895      	.L92:
 1677               	.LBB244:
 1678               	.LBB245:
 1680 045a 8091 C000 	.LM199:
 1681 045e 87FF      	/* #APP */
 1682 0460 00C0      	 ;  191 "main.c" 1
 1683               		wdr
 1684               	 ;  0 "" 2
 1685 0462 8091 C600 	/* #NOAPP */
 1686 0466 00C0      	.L113:
 1687               		lds r24,192
 1688               		sbrs r24,7
 1689               		rjmp .L92
 1691               	.LM200:
 1692 0468 9435      		lds r10,198
 1693 046a 01F4      	.L121:
 1694 046c 00C0      	.LBE245:
 1695               	.LBE244:
 1697               	.LM201:
 1698               		ldi r24,lo8(13)
 1699               		rjmp .L120
 1700               	.L119:
 1702 046e A895      	.LM202:
 1703               		cpi r25,lo8(83)
 1704               		brne .L93
 1705               	.LBB246:
 1706 0470 8091 C000 	.LBB247:
 1708 0476 00C0      	.LM203:
 1709               		ldi r24,lo8(65)
 1710               		rcall sendchar
 1712               	.LM204:
 1713               		ldi r24,lo8(86)
 1714               		rcall sendchar
 1716               	.LM205:
 1717 047c 8DE0      		ldi r24,lo8(82)
 1718 047e 00C0      		rcall sendchar
 1720               	.LM206:
 1721               		ldi r24,lo8(66)
 1722 0480 9335      		rcall sendchar
 1724               	.LM207:
 1725               		ldi r24,lo8(79)
 1726               		rcall sendchar
 1728 0484 81E4      	.LM208:
 1729 0486 00D0      		ldi r24,lo8(79)
 1730               		rcall sendchar
 1732 0488 86E5      	.LM209:
 1733 048a 00D0      		ldi r24,lo8(84)
 1734               		rjmp .L120
 1735               	.L93:
 1736 048c 82E5      	.LBE247:
 1737 048e 00D0      	.LBE246:
 1739               	.LM210:
 1740 0490 82E4      		cpi r25,lo8(86)
 1741 0492 00D0      		brne .L94
 1743               	.LM211:
 1744 0494 8FE4      		ldi r24,lo8(48)
 1745 0496 00D0      		rcall sendchar
 1747               	.LM212:
 1748 0498 8FE4      		ldi r24,lo8(56)
 1749 049a 00D0      		rjmp .L120
 1750               	.L94:
 1752 049c 84E5      	.LM213:
 1753 049e 00C0      		cpi r25,lo8(115)
 1754               		brne .L95
 1756               	.LM214:
 1757               		ldi r24,lo8(10)
 1758               		rcall sendchar
 1760 04a2 01F4      	.LM215:
 1761               		ldi r24,lo8(-109)
 1762               		rcall sendchar
 1764 04a6 00D0      	.LM216:
 1765               		ldi r24,lo8(30)
 1766               		rjmp .L120
 1767 04a8 88E3      	.L95:
 1769               	.LM217:
 1770               		cpi r25,lo8(27)
 1771               		brne .+2
 1772 04ac 9337      		rjmp .L114
 1774               	.LM218:
 1775               		ldi r24,lo8(63)
 1776 04b0 8AE0      	.L120:
 1777 04b2 00D0      		rcall sendchar
 1778               		rjmp .L114
 1835               	.Lscope5:
 1836               		.comm gBuffer,64,1
 1839               	.Letext0:
 1840               	.global __do_clear_bss
 1841               	...
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\IVAN\AppData\Local\Temp/ccuiqX3G.s:2      *ABS*:0000003f __SREG__
C:\Users\IVAN\AppData\Local\Temp/ccuiqX3G.s:3      *ABS*:0000003e __SP_H__
C:\Users\IVAN\AppData\Local\Temp/ccuiqX3G.s:4      *ABS*:0000003d __SP_L__
C:\Users\IVAN\AppData\Local\Temp/ccuiqX3G.s:5      *ABS*:00000034 __CCP__
C:\Users\IVAN\AppData\Local\Temp/ccuiqX3G.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\IVAN\AppData\Local\Temp/ccuiqX3G.s:7      *ABS*:00000001 __zero_reg__
C:\Users\IVAN\AppData\Local\Temp/ccuiqX3G.s:96     .text:00000000 __vector_default
C:\Users\IVAN\AppData\Local\Temp/ccuiqX3G.s:111    .text:00000002 sendchar
C:\Users\IVAN\AppData\Local\Temp/ccuiqX3G.s:171    .text:00000022 Buzzer_End0
C:\Users\IVAN\AppData\Local\Temp/ccuiqX3G.s:496    .text:000000b6 Buzzer_Enter0
C:\Users\IVAN\AppData\Local\Temp/ccuiqX3G.s:729    .text:0000011e main
                            *COM*:00000040 gBuffer

UNDEFINED SYMBOLS
__eewr_byte_m88
__eerd_byte_m88
__do_clear_bss
