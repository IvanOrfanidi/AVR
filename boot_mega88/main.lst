   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  94               	.global	__vector_default
  96               	__vector_default:
   1:main.c        **** /*****************************************************************************
   2:main.c        **** *
   3:main.c        **** * AVRPROG compatible boot-loader
   4:main.c        **** * Version  : 0.85 (Dec. 2008)
   5:main.c        **** * Compiler : avr-gcc 4.1.2 / avr-libc 1.4.6
   6:main.c        **** * size     : depends on features and startup ( minmal features < 512 words)
   7:main.c        **** * by       : Martin Thomas, Kaiserslautern, Germany
   8:main.c        **** *            eversmith@heizung-thomas.de
   9:main.c        **** *            Additional code and improvements contributed by:
  10:main.c        **** *           - Uwe Bonnes
  11:main.c        **** *           - Bjoern Riemer
  12:main.c        **** *           - Olaf Rempel
  13:main.c        **** *
  14:main.c        **** * License  : Copyright (c) 2006-2008 M. Thomas, U. Bonnes, O. Rempel
  15:main.c        **** *            Free to use. You have to mention the copyright
  16:main.c        **** *            owners in source-code and documentation of derived
  17:main.c        **** *            work. No warranty! (Yes, you can insert the BSD
  18:main.c        **** *            license here)
  19:main.c        **** *
  20:main.c        **** * Tested with ATmega8, ATmega16, ATmega162, ATmega32, ATmega324P,
  21:main.c        **** *             ATmega644, ATmega644P, ATmega128, AT90CAN128
  22:main.c        **** *
  23:main.c        **** * - Initial versions have been based on the Butterfly bootloader-code
  24:main.c        **** *   by Atmel Corporation (Authors: BBrandal, PKastnes, ARodland, LHM)
  25:main.c        **** *
  26:main.c        **** ****************************************************************************
  27:main.c        **** *
  28:main.c        **** *  See the makefile and readme.txt for information on how to adapt 
  29:main.c        **** *  the linker-settings to the selected Boot Size (BOOTSIZE=xxxx) and 
  30:main.c        **** *  the MCU-type. Other configurations futher down in this file.
  31:main.c        **** *
  32:main.c        **** *  With BOOT_SIMPLE, minimal features and discarded int-vectors
  33:main.c        **** *  this bootloader has should fit into a a 512 word (1024, 0x400 bytes) 
  34:main.c        **** *  bootloader-section. 
  35:main.c        **** *
  36:main.c        **** ****************************************************************************/
  37:main.c        **** //BOOTSIZE=1024
  38:main.c        **** 
  39:main.c        **** /* FREQENCY */
  40:main.c        **** #define F_CPU 14745600
  41:main.c        **** 
  42:main.c        **** /* UART BAUD RATE 19200 */
  43:main.c        **** #define BAUDRATE 19200
  44:main.c        **** 
  45:main.c        **** /* Режим двойной скорости UART (бит U2C)*/
  46:main.c        **** #define UART_DOUBLESPEED
  47:main.c        **** 
  48:main.c        **** #define DEVTYPE     DEVTYPE_BOOT
  49:main.c        **** 
  50:main.c        **** /*
  51:main.c        ****  * Выбор порта для кнопки входа в загрузчик
  52:main.c        ****  * Чтобы войти в загрузчик надо чтобы при запуске эта кнопка замыкала пин на землю
  53:main.c        ****  */
  54:main.c        **** #define	IVERT_BLPIN	0
  55:main.c        **** #define BLPORT		PORTD
  56:main.c        **** #define BLDDR		DDRD
  57:main.c        **** #define BLPIN		PIND
  58:main.c        **** #define BLPNUM		PIND5
  59:main.c        **** 
  60:main.c        **** /*
  61:main.c        ****  * Выбор порта для индикатора работы загрузчика
  62:main.c        ****  * Светодиод горит - мы в загрузчике
  63:main.c        ****  */
  64:main.c        **** 
  65:main.c        **** #define ENABLE_BOOT_LED
  66:main.c        **** #define BIPORT		PORTC
  67:main.c        **** #define BIDDR		DDRC
  68:main.c        **** #define BIPIN		PINC
  69:main.c        **** #define BIPNUM		PC1
  70:main.c        **** 
  71:main.c        **** 
  72:main.c        **** #define ENABLE_BOOT_BUZ
  73:main.c        **** #define DDR_BUZ		DDRD
  74:main.c        **** #define BUZ			PD6
  75:main.c        **** #define PORT_BUZ	PORTD
  76:main.c        **** 
  77:main.c        **** 
  78:main.c        **** #define ENABLE_BOOT_RS485
  79:main.c        **** #define DDR_RS485	DDRC
  80:main.c        **** #define RE_DE		PC1
  81:main.c        **** #define PORT_RS485	PORTC
  82:main.c        **** 
  83:main.c        **** 
  84:main.c        **** #define DISABLE_WDT_AT_STARTUP
  85:main.c        **** 
  86:main.c        **** /*
  87:main.c        ****  * Watchdog-reset is issued at exit 
  88:main.c        ****  * define the timeout-value here (see avr-libc manual)
  89:main.c        ****  */
  90:main.c        **** #define EXIT_WDT_TIME   WDTO_250MS
  91:main.c        **** 
  92:main.c        **** /*
  93:main.c        ****  * Выбор режима загрузчика
  94:main.c        ****  * SIMPLE-Mode - Загрузчик стартует когда нажата его кнопка
  95:main.c        ****  *   переход к основной программе осуществляется после сброса 
  96:main.c        ****  *   (кнопка должна быть отжата) либо по команде от программатора
  97:main.c        ****  *   При этом режиме вывод на кнопку конфигурируется как вход-с подтягом,
  98:main.c        ****  * WAIT-mode Bootloader ожидает команды на вход, если ее не было в течении промежутка времени
  99:main.c        ****  *   (который настраивается) то проихсодит переход к основной программе.
 100:main.c        ****  */
 101:main.c        **** #define START_SIMPLE
 102:main.c        **** //#define START_WAIT
 103:main.c        **** 
 104:main.c        **** /* Команда для входа в загрузчик в START_WAIT */
 105:main.c        **** #define START_WAIT_UARTCHAR 'S'
 106:main.c        **** 
 107:main.c        **** /* Выдержка для START_WAIT mode ( t = WAIT_TIME * 10ms ) */
 108:main.c        **** #define WAIT_VALUE 500 /* сейчас: 500*10ms = 3000ms = 5sec !!!Меньше 5сек. не юзать!!!*/
 109:main.c        **** 
 110:main.c        **** /*
 111:main.c        ****  * enable/disable readout of fuse and lock-bits
 112:main.c        ****  * (AVRPROG has to detect the AVR correctly by device-code
 113:main.c        ****  * to show the correct information).
 114:main.c        ****  */
 115:main.c        **** //#define ENABLEREADFUSELOCK
 116:main.c        **** 
 117:main.c        **** /* enable/disable write of lock-bits
 118:main.c        ****  * WARNING: lock-bits can not be reseted by bootloader (as far as I know)
 119:main.c        ****  * Only protection no unprotection, "chip erase" from bootloader only
 120:main.c        ****  * clears the flash but does no real "chip erase" (this is not possible
 121:main.c        ****  * with a bootloader as far as I know)
 122:main.c        ****  * Keep this undefined!
 123:main.c        ****  */
 124:main.c        **** //#define WRITELOCKBITS
 125:main.c        **** 
 126:main.c        **** /*
 127:main.c        ****  * define the following if the bootloader should not output
 128:main.c        ****  * itself at flash read (will fake an empty boot-section)
 129:main.c        ****  */
 130:main.c        **** //#define READ_PROTECT_BOOTLOADER 
 131:main.c        **** 
 132:main.c        **** #define VERSION_HIGH '0'
 133:main.c        **** #define VERSION_LOW  '8'
 134:main.c        **** 
 135:main.c        **** #define GET_LOCK_BITS           0x0001
 136:main.c        **** #define GET_LOW_FUSE_BITS       0x0000
 137:main.c        **** #define GET_HIGH_FUSE_BITS      0x0003
 138:main.c        **** #define GET_EXTENDED_FUSE_BITS  0x0002
 139:main.c        **** 
 140:main.c        **** /* Расчет делителя частоты для USART*/
 141:main.c        **** #ifdef UART_DOUBLESPEED
 142:main.c        **** 
 143:main.c        **** 	#define UART_CALC_BAUDRATE(baudRate) ((uint32_t)((F_CPU) + ((uint32_t)baudRate * 4UL)) / ((uint32_
 144:main.c        **** 
 145:main.c        **** #else
 146:main.c        **** 
 147:main.c        **** 	#define UART_CALC_BAUDRATE(baudRate) ((uint32_t)((F_CPU) + ((uint32_t)baudRate * 8UL)) / ((uint32_
 148:main.c        **** 
 149:main.c        **** #endif
 150:main.c        **** 
 151:main.c        **** 
 152:main.c        **** #include <stdint.h>
 153:main.c        **** #include <avr/io.h>
 154:main.c        **** #include <avr/wdt.h>
 155:main.c        **** #include <avr/boot.h>
 156:main.c        **** #include <avr/pgmspace.h>
 157:main.c        **** #include <avr/eeprom.h>
 158:main.c        **** #include <avr/interrupt.h>
 159:main.c        **** #include <util/delay.h>
 160:main.c        **** 
 161:main.c        **** #include "chipdef.h"
 162:main.c        **** 
 163:main.c        **** uint8_t gBuffer[SPM_PAGESIZE];
 164:main.c        **** 
 165:main.c        **** #if defined(BOOTLOADERHASNOVECTORS)
 166:main.c        **** 	#warning "This Bootloader does not link interrupt vectors - see makefile"
 167:main.c        **** 	/* make the linker happy - it wants to see __vector_default */
 168:main.c        **** 	// void __vector_default(void) { ; }
 169:main.c        **** 	void __vector_default(void) { ; }
  97               	abn	68,0,169,.LM0-.LFBB1
  98               	.LM0:
  99               	.LFBB1:
 100               	/* prologue: function */
 101               	/* frame size = 0 */
 102               	/* epilogue start */
 104               	.LM1:
 105 0000 0895      		ret
 107               	.Lscope1:
 111               	sendchar:
 170:main.c        **** nt8_t data)
 171:main.c        **** {
 172:main.c        **** 
 173:main.c        **** #ifdef ENABLE_BOOT_RS485
 112               	3,.LM2-.LFBB2
 113               	.LM2:
 114               	.LFBB2:
 115               	/* prologue: function */
 116               	/* frame size = 0 */
 117 0002 982F      		mov r25,r24
 174:main.c        **** PORT_RS485|=(1<<RE_DE);
 175:main.c        **** #endif
 176:main.c        **** 
 118               	n	68,0,176,.LM3-.LFBB2
 119               	.LM3:
 120 0004 419A      		sbi 40-32,1
 121 0006 00C0      		rjmp .L4
 122               	.L5:
 177:main.c        **** while (!(UART_STATUS & (1<<UART_TXREADY))) asm volatile ("wdr");
 178:main.c        **** 	UART_DATA = data;
 179:main.c        **** 	_delay_ms(1);
 123               	bn	68,0,179,.LM4-.LFBB2
 124               	.LM4:
 125               	/* #APP */
 126               	 ;  179 "main.c" 1
 127 0008 A895      		wdr
 128               	 ;  0 "" 2
 129               	/* #NOAPP */
 130               	.L4:
 131 000a 8091 C000 		lds r24,192
 132 000e 85FF      		sbrs r24,5
 133 0010 00C0      		rjmp .L5
 180:main.c        **** 
 134               	0,180,.LM5-.LFBB2
 135               	.LM5:
 136 0012 9093 C600 		sts 198,r25
 137               	.LBB139:
 138               	.LBB140:
 139               	.LBB141:
 140               	.LBB142:
 142               	.Ltext1:
   1:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
   5:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
   8:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  11:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      distribution.
  15:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  16:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  20:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  32:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  34:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  37:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  39:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /** \file */
  40:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     \code
  42:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     \endcode
  44:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  45:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  53:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  60:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  62:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** */
  63:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  64:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** #endif
  68:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  69:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  71:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     register.
  76:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  77:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     can be achieved.
  79:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** */
  80:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** void
  81:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** {
  83:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 	);
  89:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** }
  90:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  91:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  93:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     counter register pair.
  98:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  99:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****  */
 102:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** void
 103:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** {
 105:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 143               	8,0,105,.LM6-.LFBB2
 144               	.LM6:
 145 0016 86E6      		ldi r24,lo8(3686)
 146 0018 9EE0      		ldi r25,hi8(3686)
 147               	/* #APP */
 148               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 149 001a 0197      		1: sbiw r24,1
 150 001c 01F4      		brne 1b
 151               	 ;  0 "" 2
 152               	/* #NOAPP */
 153               	.LBE142:
 154               	.LBE141:
 155               	.LBE140:
 156               	.LBE139:
 158               	.Ltext2:
 181:main.c        **** #ifdef ENABLE_BOOT_RS485
 182:main.c        **** 	PORT_RS485&=~(1<<RE_DE);
 183:main.c        **** #endif
 184:main.c        **** 
 159               	,.LM7-.LFBB2
 160               	.LM7:
 161 001e 4198      		cbi 40-32,1
 162               	/* epilogue start */
 185:main.c        **** 
 186:main.c        **** 
 187:main.c        **** static uint8_t recvchar(void)
 163               	abn	68,0,187,.LM8-.LFBB2
 164               	.LM8:
 165 0020 0895      		ret
 167               	.Lscope2:
 169               	.global	Buzzer_End0
 171               	Buzzer_End0:
 188:main.c        **** 	while (!(UART_STATUS & (1<<UART_RXREADY))) asm volatile ("wdr");
 189:main.c        **** 	return UART_DATA;
 190:main.c        **** }
 191:main.c        **** 
 192:main.c        **** static inline void eraseFlash(void)
 193:main.c        **** {
 194:main.c        **** 	// erase only main section (bootloader protection)
 195:main.c        **** 	uint32_t addr = 0;
 196:main.c        **** 	while (APP_END > addr) 
 197:main.c        **** 		{
 198:main.c        **** 		boot_page_erase(addr);		// Perform page erase
 199:main.c        **** 		boot_spm_busy_wait();		// Wait until the memory is erased.
 200:main.c        **** 		addr += SPM_PAGESIZE;
 201:main.c        **** 		asm volatile ("wdr");
 202:main.c        **** 		}
 203:main.c        **** 	boot_rww_enable();
 204:main.c        **** }
 205:main.c        **** 
 206:main.c        **** static inline void recvBuffer(pagebuf_t size)
 207:main.c        **** {
 208:main.c        **** 	pagebuf_t cnt;
 209:main.c        **** 	uint8_t *tmp = gBuffer;
 210:main.c        **** 
 211:main.c        **** 	for (cnt = 0; cnt < sizeof(gBuffer); cnt++) 
 212:main.c        **** 		{
 213:main.c        **** 		*tmp++ = (cnt < size) ? recvchar() : 0xFF;
 214:main.c        **** 		}
 215:main.c        **** }
 216:main.c        **** 
 217:main.c        **** static inline uint16_t writeFlashPage(uint16_t waddr, pagebuf_t size)
 218:main.c        **** {
 219:main.c        **** 	uint32_t pagestart = (uint32_t)waddr<<1;
 220:main.c        **** 	uint32_t baddr = pagestart;
 221:main.c        **** 	uint16_t data;
 222:main.c        **** 	uint8_t *tmp = gBuffer;
 223:main.c        **** 
 224:main.c        **** 	do 
 225:main.c        **** 		{
 226:main.c        **** 		data = *tmp++;
 227:main.c        **** 		data |= *tmp++ << 8;
 228:main.c        **** 		boot_page_fill(baddr, data);	// call asm routine.
 229:main.c        **** 
 230:main.c        **** 		baddr += 2;			// Select next word in memory
 231:main.c        **** 		size -= 2;			// Reduce number of bytes to write by two
 232:main.c        **** 		} 
 233:main.c        **** 	while (size);				// Loop until all bytes written
 234:main.c        **** 
 235:main.c        **** 	boot_page_write(pagestart);
 236:main.c        **** 	boot_spm_busy_wait();
 237:main.c        **** 	boot_rww_enable();		// Re-enable the RWW section
 238:main.c        **** 
 239:main.c        **** 	return baddr>>1;
 240:main.c        **** }
 241:main.c        **** 
 242:main.c        **** static inline uint16_t writeEEpromPage(uint16_t address, pagebuf_t size)
 243:main.c        **** {
 244:main.c        **** 	uint8_t *tmp = gBuffer;
 245:main.c        **** 
 246:main.c        **** 	do 
 247:main.c        **** 		{
 248:main.c        **** 		eeprom_write_byte( (uint8_t*)address, *tmp++ );
 249:main.c        **** 		address++;			// Select next byte
 250:main.c        **** 		size--;				// Decreas number of bytes to write
 251:main.c        **** 		}
 252:main.c        **** 	while (size);				// Loop until all bytes written
 253:main.c        **** 
 254:main.c        **** 	// eeprom_busy_wait();
 255:main.c        **** 
 256:main.c        **** 	return address;
 257:main.c        **** }
 258:main.c        **** 
 259:main.c        **** static inline uint16_t readFlashPage(uint16_t waddr, pagebuf_t size)
 260:main.c        **** {
 261:main.c        **** 	uint32_t baddr = (uint32_t)waddr<<1;
 262:main.c        **** 	uint16_t data;
 263:main.c        **** 
 264:main.c        **** 	do 
 265:main.c        **** 	{
 266:main.c        **** 
 267:main.c        **** #ifndef READ_PROTECT_BOOTLOADER
 268:main.c        **** #warning "Bootloader not read-protected"
 269:main.c        **** 
 270:main.c        **** 	#if defined(RAMPZ)
 271:main.c        **** 		data = pgm_read_word_far(baddr);
 272:main.c        **** 	#else
 273:main.c        **** 		data = pgm_read_word_near(baddr);
 274:main.c        **** 	#endif
 275:main.c        **** 
 276:main.c        **** #else
 277:main.c        **** 		// don't read bootloader
 278:main.c        **** 		if ( baddr < APP_END ) 
 279:main.c        **** 		{
 280:main.c        **** 		#if defined(RAMPZ)
 281:main.c        **** 			data = pgm_read_word_far(baddr);
 282:main.c        **** 		#else
 283:main.c        **** 			data = pgm_read_word_near(baddr);
 284:main.c        **** 		#endif
 285:main.c        **** 		}
 286:main.c        **** 		else 
 287:main.c        **** 		{
 288:main.c        **** 		data = 0xFFFF; // fake empty
 289:main.c        **** 		}
 290:main.c        **** #endif
 291:main.c        **** 		sendchar(data);			// send LSB
 292:main.c        **** 		sendchar((data >> 8));		// send MSB
 293:main.c        **** 		baddr += 2;			// Select next word in memory
 294:main.c        **** 		size -= 2;			// Subtract two bytes from number of bytes to read
 295:main.c        **** 	} 
 296:main.c        **** 	while (size);				// Repeat until block has been read
 297:main.c        **** 	return baddr>>1;
 298:main.c        **** }
 299:main.c        **** 
 300:main.c        **** static inline uint16_t readEEpromPage(uint16_t address, pagebuf_t size)
 301:main.c        **** {
 302:main.c        **** 	do 
 303:main.c        **** 	{
 304:main.c        **** 	asm volatile ("wdr");
 305:main.c        **** 	sendchar( eeprom_read_byte( (uint8_t*)address ) );
 306:main.c        **** 	address++;
 307:main.c        **** 	size--;				// Decrease number of bytes to read
 308:main.c        **** 	} 
 309:main.c        **** 	while (size);				// Repeat until block has been read
 310:main.c        **** 
 311:main.c        **** 	return address;
 312:main.c        **** }
 313:main.c        **** 
 314:main.c        **** #if defined(ENABLEREADFUSELOCK)
 315:main.c        **** static uint8_t read_fuse_lock(uint16_t addr)
 316:main.c        **** {
 317:main.c        **** 	uint8_t mode = (1<<BLBSET) | (1<<SPMEN);
 318:main.c        **** 	uint8_t retval;
 319:main.c        **** 
 320:main.c        **** 	asm volatile
 321:main.c        **** 	(
 322:main.c        **** 		"movw r30, %3\n\t"		/* Z to addr */ \
 323:main.c        **** 		"sts %0, %2\n\t"		/* set mode in SPM_REG */ \
 324:main.c        **** 		"lpm\n\t"			/* load fuse/lock value into r0 */ \
 325:main.c        **** 		"mov %1,r0\n\t"			/* save return value */ \
 326:main.c        **** 		: "=m" (SPM_REG),
 327:main.c        **** 		  "=r" (retval)
 328:main.c        **** 		: "r" (mode),
 329:main.c        **** 		  "r" (addr)
 330:main.c        **** 		: "r30", "r31", "r0"
 331:main.c        **** 	);
 332:main.c        **** 	return retval;
 333:main.c        **** }
 334:main.c        **** #endif
 335:main.c        **** 
 336:main.c        **** static void send_boot(void)
 337:main.c        **** {
 338:main.c        **** 	sendchar('A');
 339:main.c        **** 	sendchar('V');
 340:main.c        **** 	sendchar('R');
 341:main.c        **** 	sendchar('B');
 342:main.c        **** 	sendchar('O');
 343:main.c        **** 	sendchar('O');
 344:main.c        **** 	sendchar('T');
 345:main.c        **** }
 346:main.c        **** 
 347:main.c        **** static void (*jump_to_app)(void) = 0x0000;
 348:main.c        **** 
 349:main.c        **** int main(void)
 350:main.c        **** {
 351:main.c        **** 	DDRC|= (1<<PC3);
 352:main.c        **** 
 353:main.c        **** 	uint16_t address = 0;
 354:main.c        **** 	uint8_t device = 0, val;
 355:main.c        **** 
 356:main.c        **** #ifdef ENABLE_BOOT_RS485
 357:main.c        **** 	DDR_RS485|= (1<<RE_DE);
 358:main.c        **** 	PORT_RS485&=~(1<<RE_DE);
 359:main.c        **** #endif
 360:main.c        **** 
 361:main.c        **** #ifdef ENABLE_BOOT_LED	// LED ON
 362:main.c        **** 	BIPORT |= (1<<BIPNUM);	
 363:main.c        **** 	BIDDR  |= (1<<BIPNUM);
 364:main.c        **** #endif
 365:main.c        **** 
 366:main.c        **** #ifdef ENABLE_BOOT_BUZ //Buzzer ON
 367:main.c        **** 		DDR_BUZ|=(1<<BUZ);
 368:main.c        **** #endif
 369:main.c        **** 
 370:main.c        **** #ifdef DISABLE_WDT_AT_STARTUP
 371:main.c        **** 	#ifdef WDT_OFF_SPECIAL
 372:main.c        **** 		#warning "using target specific watchdog_off"
 373:main.c        **** 		bootloader_wdt_off();
 374:main.c        **** 	#else
 375:main.c        **** 		cli();
 376:main.c        **** 		wdt_reset();
 377:main.c        **** 		wdt_enable(WDTO_2S);
 378:main.c        **** 	#endif
 379:main.c        **** #endif
 380:main.c        **** 	
 381:main.c        **** #ifdef START_POWERSAVE
 382:main.c        **** 	uint8_t OK = 1;
 383:main.c        **** #endif
 384:main.c        **** 
 385:main.c        **** 	BLDDR  &= ~(1<<BLPNUM);		// set as Input
 386:main.c        **** 	BLPORT |= (1<<BLPNUM);		// Enable pullup
 387:main.c        **** 
 388:main.c        **** 	// Set baud rate
 389:main.c        **** 	UART_BAUD_HIGH = (UART_CALC_BAUDRATE(BAUDRATE)>>8) & 0xFF;
 390:main.c        **** 	UART_BAUD_LOW = (UART_CALC_BAUDRATE(BAUDRATE) & 0xFF);
 391:main.c        **** 
 392:main.c        **** #ifdef UART_DOUBLESPEED
 393:main.c        **** 	UART_STATUS = ( 1<<UART_DOUBLE );
 394:main.c        **** #endif
 395:main.c        **** 
 396:main.c        **** 	UART_CTRL = UART_CTRL_DATA;
 397:main.c        **** 	UART_CTRL2 = UART_CTRL2_DATA;
 398:main.c        **** 	
 399:main.c        **** #if defined(START_POWERSAVE)
 400:main.c        **** 	/*
 401:main.c        **** 		This is an adoption of the Butterfly Bootloader startup-sequence.
 402:main.c        **** 		It may look a little strange but separating the login-loop from
 403:main.c        **** 		the main parser-loop gives a lot a possibilities (timeout, sleep-modes
 404:main.c        **** 	    etc.).
 405:main.c        **** 	*/
 406:main.c        **** 	for(;OK;) 
 407:main.c        **** 	{
 408:main.c        **** 
 409:main.c        **** 		asm volatile ("wdr");
 410:main.c        **** 
 411:main.c        **** 	#if(IVERT_BLPIN)
 412:main.c        **** 		if (!(BLPIN & (1<<BLPNUM)))
 413:main.c        **** 	#else
 414:main.c        **** 		if ((BLPIN & (1<<BLPNUM)))
 415:main.c        **** 	#endif
 416:main.c        **** 		{
 417:main.c        **** 		asm volatile ("wdr");
 418:main.c        **** 		// jump to main app if pin is not grounded
 419:main.c        **** 		BLPORT &= ~(1<<BLPNUM);	// set to default
 420:main.c        **** 
 421:main.c        **** 		#ifdef UART_DOUBLESPEED
 422:main.c        **** 			UART_STATUS &= ~( 1<<UART_DOUBLE );
 423:main.c        **** 		#endif
 424:main.c        **** 
 425:main.c        **** 
 426:main.c        **** 		#ifdef ENABLE_BOOT_LED	// LED OFF
 427:main.c        **** 		BIPORT &= ~(1<<BIPNUM);	
 428:main.c        **** 		BIDDR  &= ~(1<<BIPNUM);
 429:main.c        **** 		#endif
 430:main.c        **** 
 431:main.c        **** 		#ifdef ENABLE_BOOT_BUZ
 432:main.c        **** 		DDR_BUZ&=~(1<<BUZ);
 433:main.c        **** 		#endif
 434:main.c        **** 
 435:main.c        **** 		jump_to_app();		// Jump to application sector
 436:main.c        **** 
 437:main.c        **** 		} 
 438:main.c        **** 		else 
 439:main.c        **** 		{
 440:main.c        **** 		val = recvchar();
 441:main.c        **** 		/* ESC */
 442:main.c        **** 			if (val == 0x1B) 
 443:main.c        **** 			{
 444:main.c        **** 				// AVRPROG connection
 445:main.c        **** 				// Wait for signon
 446:main.c        **** 				while (val != 'S')
 447:main.c        **** 				{
 448:main.c        **** 					val = recvchar();
 449:main.c        **** 					asm volatile ("wdr");
 450:main.c        **** 				}
 451:main.c        **** 
 452:main.c        **** 				send_boot();			// Report signon
 453:main.c        **** 				OK = 0;
 454:main.c        **** 			} 
 455:main.c        **** 			else 
 456:main.c        **** 			{
 457:main.c        **** 			asm volatile ("wdr");
 458:main.c        **** 			sendchar('?');
 459:main.c        **** 			}
 460:main.c        **** 	    }
 461:main.c        **** 		// Power-Save code here
 462:main.c        **** 	}
 463:main.c        **** 
 464:main.c        **** #elif defined(START_SIMPLE)
 465:main.c        **** 
 466:main.c        **** #if(IVERT_BLPIN)
 467:main.c        **** 	if (!(BLPIN & (1<<BLPNUM)))
 468:main.c        **** #else
 469:main.c        **** 	if ((BLPIN & (1<<BLPNUM)))
 470:main.c        **** #endif
 471:main.c        **** 	{
 472:main.c        **** 		asm volatile ("wdr");
 473:main.c        **** 		// jump to main app if pin is not grounded
 474:main.c        **** 		BLPORT &= ~(1<<BLPNUM);		// set to default	
 475:main.c        **** 			
 476:main.c        **** 	#ifdef UART_DOUBLESPEED
 477:main.c        **** 		UART_STATUS &= ~( 1<<UART_DOUBLE );
 478:main.c        **** 	#endif
 479:main.c        **** 
 480:main.c        **** 		#ifdef ENABLE_BOOT_LED	// LED OFF
 481:main.c        **** 		BIPORT &= ~(1<<BIPNUM);	
 482:main.c        **** 		BIDDR  &= ~(1<<BIPNUM);
 483:main.c        **** 		#endif
 484:main.c        **** 
 485:main.c        **** 		#ifdef ENABLE_BOOT_BUZ
 486:main.c        **** 		DDR_BUZ&=~(1<<BUZ);
 487:main.c        **** 		#endif
 488:main.c        **** 
 489:main.c        **** 		jump_to_app();			// Jump to application sector
 490:main.c        **** 	}
 491:main.c        **** 
 492:main.c        **** #elif defined(START_WAIT)
 493:main.c        **** 
 494:main.c        **** 	uint16_t cnt = 0;
 495:main.c        **** 
 496:main.c        **** 	while (1) {
 497:main.c        **** 
 498:main.c        **** 		asm volatile ("wdr");
 499:main.c        **** 
 500:main.c        **** 		if (UART_STATUS & (1<<UART_RXREADY))
 501:main.c        **** 			if (UART_DATA == START_WAIT_UARTCHAR)
 502:main.c        **** 				break;
 503:main.c        **** 
 504:main.c        **** 		if (cnt++ >= WAIT_VALUE) {
 505:main.c        **** 			BLPORT &= ~(1<<BLPNUM);		// set to default
 506:main.c        **** 
 507:main.c        **** 
 508:main.c        **** 			#ifdef ENABLE_BOOT_LED	// LED OFF
 509:main.c        **** 			BIPORT &= ~(1<<BIPNUM);	
 510:main.c        **** 			BIDDR  &= ~(1<<BIPNUM);
 511:main.c        **** 			#endif
 512:main.c        **** 
 513:main.c        **** 			#ifdef ENABLE_BOOT_BUZ
 514:main.c        **** 			DDR_BUZ&=~(1<<BUZ);
 515:main.c        **** 			#endif
 516:main.c        **** 
 517:main.c        **** 			jump_to_app();			// Jump to application sector
 518:main.c        **** 		}
 519:main.c        **** 
 520:main.c        **** 		_delay_ms(10);
 521:main.c        **** 	}
 522:main.c        **** 	send_boot();
 523:main.c        **** 
 524:main.c        **** #elif defined(START_BOOTICE)
 525:main.c        **** #warning "BOOTICE mode - no startup-condition"
 526:main.c        **** 
 527:main.c        **** #else
 528:main.c        **** #error "Select START_ condition for bootloader in main.c"
 529:main.c        **** #endif
 530:main.c        **** 
 531:main.c        **** #ifdef ENABLE_BOOT_BUZ //Buzzer ON
 532:main.c        **** 
 533:main.c        **** 		asm volatile ("wdr");
 534:main.c        **** 		_delay_ms(1000);
 535:main.c        **** 		asm volatile ("wdr");
 536:main.c        **** 		_delay_ms(1000);
 537:main.c        **** 		asm volatile ("wdr");
 538:main.c        **** 		Buzzer_Enter0();
 539:main.c        **** 		asm volatile ("wdr");
 540:main.c        **** 
 541:main.c        **** #endif
 542:main.c        **** 
 543:main.c        **** 	while(1) 
 544:main.c        **** 	{
 545:main.c        **** 		asm volatile ("wdr");
 546:main.c        **** 		val = recvchar();
 547:main.c        **** 		// Autoincrement?
 548:main.c        **** 		if (val == 'a') 
 549:main.c        **** 		{
 550:main.c        **** 			sendchar('Y');			// Autoincrement is quicker
 551:main.c        **** 
 552:main.c        **** 		//write address
 553:main.c        **** 		} 
 554:main.c        **** 		else if (val == 'A') 
 555:main.c        **** 		{
 556:main.c        **** 			address = recvchar();		//read address 8 MSB
 557:main.c        **** 			address = (address<<8) | recvchar();
 558:main.c        **** 			sendchar('\r');
 559:main.c        **** 
 560:main.c        **** 		// Buffer load support
 561:main.c        **** 		} 
 562:main.c        **** 		else if (val == 'b') 
 563:main.c        **** 		{
 564:main.c        **** 			sendchar('Y');					// Report buffer load supported
 565:main.c        **** 			sendchar((sizeof(gBuffer) >> 8) & 0xFF);	// Report buffer size in bytes
 566:main.c        **** 			sendchar(sizeof(gBuffer) & 0xFF);
 567:main.c        **** 
 568:main.c        **** 		// Start buffer load
 569:main.c        **** 		} 
 570:main.c        **** 		else if (val == 'B') 
 571:main.c        **** 		{
 572:main.c        **** 			pagebuf_t size;
 573:main.c        **** 			size = recvchar() << 8;				// Load high byte of buffersize
 574:main.c        **** 			size |= recvchar();				// Load low byte of buffersize
 575:main.c        **** 			val = recvchar();				// Load memory type ('E' or 'F')
 576:main.c        **** 			recvBuffer(size);
 577:main.c        **** 
 578:main.c        **** 			if (device == DEVTYPE) 
 579:main.c        **** 			{
 580:main.c        **** 				if (val == 'F') 
 581:main.c        **** 				{
 582:main.c        **** 				address = writeFlashPage(address, size);
 583:main.c        **** 				} 
 584:main.c        **** 				else if (val == 'E') 
 585:main.c        **** 				{
 586:main.c        **** 				address = writeEEpromPage(address, size);
 587:main.c        **** 				}
 588:main.c        **** 				sendchar('\r');
 589:main.c        **** 			} 
 590:main.c        **** 			else 
 591:main.c        **** 			{
 592:main.c        **** 			sendchar(0);
 593:main.c        **** 			}
 594:main.c        **** 
 595:main.c        **** 		// Block read
 596:main.c        **** 		} 
 597:main.c        **** 		else if (val == 'g') 
 598:main.c        **** 		{
 599:main.c        **** 			pagebuf_t size;
 600:main.c        **** 			size = recvchar() << 8;				// Load high byte of buffersize
 601:main.c        **** 			size |= recvchar();				// Load low byte of buffersize
 602:main.c        **** 			val = recvchar();				// Get memtype
 603:main.c        **** 
 604:main.c        **** 			if (val == 'F') 
 605:main.c        **** 			{
 606:main.c        **** 			address = readFlashPage(address, size);
 607:main.c        **** 			} 
 608:main.c        **** 			else if (val == 'E') 
 609:main.c        **** 			{
 610:main.c        **** 			address = readEEpromPage(address, size);
 611:main.c        **** 			}
 612:main.c        **** 
 613:main.c        **** 		// Chip erase
 614:main.c        ****  		} 
 615:main.c        **** 		else if (val == 'e') 
 616:main.c        **** 		{
 617:main.c        **** 		if (device == DEVTYPE) 
 618:main.c        **** 			{
 619:main.c        **** 			eraseFlash();
 620:main.c        **** 			}
 621:main.c        **** 		sendchar('\r');
 622:main.c        **** 
 623:main.c        **** 		// Exit upgrade
 624:main.c        **** 		} 
 625:main.c        **** 		else if (val == 'E') 
 626:main.c        **** 		{
 627:main.c        **** 
 628:main.c        **** 		#ifdef ENABLE_BOOT_RS485
 629:main.c        **** 			PORT_RS485&=~(1<<RE_DE);
 630:main.c        **** 			DDR_RS485&=~(1<<RE_DE);
 631:main.c        **** 		#endif
 632:main.c        **** 
 633:main.c        **** 		asm volatile ("wdr");
 634:main.c        **** 		#ifdef ENABLE_BOOT_BUZ //Buzzer ON
 635:main.c        **** 			Buzzer_End0();
 636:main.c        **** 		#endif
 637:main.c        **** 		asm volatile ("wdr");
 638:main.c        **** 
 639:main.c        **** 		wdt_enable(EXIT_WDT_TIME); // Enable Watchdog Timer to give reset
 640:main.c        **** 		sendchar('\r');
 641:main.c        **** 		while(1);
 642:main.c        **** 
 643:main.c        **** 		#ifdef WRITELOCKBITS
 644:main.c        **** 			#warning "Extension 'WriteLockBits' enabled"
 645:main.c        **** 			// TODO: does not work reliably
 646:main.c        **** 			// write lockbits
 647:main.c        **** 			} 
 648:main.c        **** 			else if (val == 'l') 
 649:main.c        **** 			{
 650:main.c        **** 			if (device == DEVTYPE) 
 651:main.c        **** 				{
 652:main.c        **** 				// write_lock_bits(recvchar());
 653:main.c        **** 				boot_lock_bits_set(recvchar());	// boot.h takes care of mask
 654:main.c        **** 				boot_spm_busy_wait();
 655:main.c        **** 				}
 656:main.c        **** 			sendchar('\r');
 657:main.c        **** 		#endif
 658:main.c        **** 		// Enter programming mode
 659:main.c        **** 		} 
 660:main.c        **** 		else if (val == 'P') 
 661:main.c        **** 		{
 662:main.c        **** 		sendchar('\r');
 663:main.c        **** 
 664:main.c        **** 		// Leave programming mode
 665:main.c        **** 		} 
 666:main.c        **** 		else if (val == 'L') 
 667:main.c        **** 		{
 668:main.c        **** 		sendchar('\r');
 669:main.c        **** 		// return programmer type
 670:main.c        **** 		} 
 671:main.c        **** 		else if (val == 'p') 
 672:main.c        **** 		{
 673:main.c        **** 		sendchar('S');		// always serial programmer
 674:main.c        **** 
 675:main.c        **** 		#ifdef ENABLEREADFUSELOCK
 676:main.c        **** 			#warning "Extension 'ReadFuseLock' enabled"
 677:main.c        **** 			// read "low" fuse bits
 678:main.c        **** 			} 
 679:main.c        **** 			else if (val == 'F') 
 680:main.c        **** 			{
 681:main.c        **** 			sendchar(read_fuse_lock(GET_LOW_FUSE_BITS));
 682:main.c        **** 
 683:main.c        **** 			// read lock bits
 684:main.c        **** 			} 
 685:main.c        **** 			else if (val == 'r') 
 686:main.c        **** 			{
 687:main.c        **** 			sendchar(read_fuse_lock(GET_LOCK_BITS));
 688:main.c        **** 
 689:main.c        **** 			// read high fuse bits
 690:main.c        **** 			} 
 691:main.c        **** 			else if (val == 'N') 
 692:main.c        **** 			{
 693:main.c        **** 			sendchar(read_fuse_lock(GET_HIGH_FUSE_BITS));
 694:main.c        **** 			// read extended fuse bits
 695:main.c        **** 			} 
 696:main.c        **** 			else if (val == 'Q') 
 697:main.c        **** 			{
 698:main.c        **** 			sendchar(read_fuse_lock(GET_EXTENDED_FUSE_BITS));
 699:main.c        **** 			#endif
 700:main.c        **** 
 701:main.c        **** 		// Return device type
 702:main.c        **** 		} 
 703:main.c        **** 		else if (val == 't') 
 704:main.c        **** 		{
 705:main.c        **** 		sendchar(DEVTYPE);
 706:main.c        **** 		sendchar(0);
 707:main.c        **** 		// clear and set LED ignored
 708:main.c        **** 		} 
 709:main.c        **** 		else if ((val == 'x') || (val == 'y')) 
 710:main.c        **** 		{
 711:main.c        **** 		recvchar();
 712:main.c        **** 		sendchar('\r');
 713:main.c        **** 
 714:main.c        **** 		// set device
 715:main.c        **** 		} 
 716:main.c        **** 		else if (val == 'T') 
 717:main.c        **** 		{
 718:main.c        **** 		device = recvchar();
 719:main.c        **** 		sendchar('\r');
 720:main.c        **** 		// Return software identifier
 721:main.c        **** 		} 
 722:main.c        **** 		else if (val == 'S') 
 723:main.c        **** 		{
 724:main.c        **** 		send_boot();
 725:main.c        **** 
 726:main.c        **** 		// Return Software Version
 727:main.c        **** 		} 
 728:main.c        **** 		else if (val == 'V') {
 729:main.c        **** 		sendchar(VERSION_HIGH);
 730:main.c        **** 		sendchar(VERSION_LOW);
 731:main.c        **** 
 732:main.c        **** 		// Return Signature Bytes (it seems that 
 733:main.c        **** 		// AVRProg expects the "Atmel-byte" 0x1E last
 734:main.c        **** 		// but shows it first in the dialog-window)
 735:main.c        **** 		} 
 736:main.c        **** 		else if (val == 's') 
 737:main.c        **** 		{
 738:main.c        **** 		sendchar(SIG_BYTE3);
 739:main.c        **** 		sendchar(SIG_BYTE2);
 740:main.c        **** 		sendchar(SIG_BYTE1);
 741:main.c        **** 
 742:main.c        **** 		/* ESC */
 743:main.c        **** 		} 
 744:main.c        **** 		else if(val != 0x1b) 
 745:main.c        **** 		{
 746:main.c        **** 		sendchar('?');
 747:main.c        **** 		}
 748:main.c        **** 
 749:main.c        **** 	
 750:main.c        **** 	} 
 751:main.c        **** 
 752:main.c        **** 	
 753:main.c        **** 
 754:main.c        **** 	return 0;
 755:main.c        **** }
 756:main.c        **** 
 757:main.c        **** void Buzzer_End0(void)
 758:main.c        **** {
 759:main.c        **** 
 760:main.c        **** 		PORT_BUZ|=(1<<BUZ);
 761:main.c        **** 		_delay_ms(300);
 172               	8,0,761,.LM9-.LFBB3
 173               	.LM9:
 174               	.LFBB3:
 175               	/* prologue: function */
 176               	/* frame size = 0 */
 762:main.c        **** 
 763:main.c        **** 		PORT_BUZ&=~(1<<BUZ);
 177               	bn	68,0,763,.LM10-.LFBB3
 178               	.LM10:
 179 0022 5E9A      		sbi 43-32,6
 180 0024 88EB      		ldi r24,lo8(3000)
 181 0026 9BE0      		ldi r25,hi8(3000)
 182               	.LBB143:
 183               	.LBB144:
 184               	.LBB145:
 185               	.LBB146:
 187               	.Ltext3:
 189               	.LM11:
 190 0028 20E7      		ldi r18,lo8(368)
 191 002a 31E0      		ldi r19,hi8(368)
 192               	.L8:
 193 002c F901      		movw r30,r18
 194               	/* #APP */
 195               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 196 002e 3197      		1: sbiw r30,1
 197 0030 01F4      		brne 1b
 198               	 ;  0 "" 2
 199               	/* #NOAPP */
 200               	.LBE146:
 201               	.LBE145:
 203               	.Ltext4:
   1:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    All rights reserved.
   5:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
   6:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
   9:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  12:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****      distribution.
  16:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  17:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  21:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  33:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** /* $Id: delay.h,v 1.5.2.1 2009/02/25 10:14:03 joerg_wunsch Exp $ */
  34:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  35:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  38:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #include <inttypes.h>
  39:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  40:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  41:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** /** \file */
  42:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  43:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     \code
  44:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  45:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  46:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     #include <util/delay.h>
  47:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     \endcode
  48:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  49:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  50:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  51:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  52:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     used.
  53:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  54:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  55:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  56:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  57:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  58:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  59:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  60:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  61:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  62:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  63:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  64:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  65:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  66:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  67:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  68:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  69:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  70:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     routines linked into the application.
  71:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  72:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  73:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  74:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  75:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  76:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** */
  77:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  78:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  79:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  80:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  81:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #endif
  82:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  83:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #ifndef F_CPU
  84:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  85:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  86:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  87:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #endif
  88:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  89:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  90:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  91:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** #endif
  92:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  93:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** /**
  94:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    \ingroup util_delay
  95:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  96:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
  97:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
  98:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
  99:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 100:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
 101:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 102:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 
 103:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 104:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 105:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 106:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 107:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 108:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h ****  */
 109:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** void
 110:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** _delay_ms(double __ms)
 111:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** {
 112:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 	uint16_t __ticks;
 113:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 114:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 115:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = 1;
 116:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 117:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 	{
 118:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 119:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 120:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 		while(__ticks)
 121:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 		{
 122:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 			// wait 1/10 ms
 123:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 124:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h **** 			__ticks --;
 204               	B3
 205               	.LM12:
 206 0032 0197      		sbiw r24,1
 208               	.LM13:
 209 0034 01F4      		brne .L8
 210               	.LBE144:
 211               	.LBE143:
 213               	.Ltext5:
 764:main.c        **** 
 765:main.c        **** 		_delay_ms(100);
 214               	,0,765,.LM14-.LFBB3
 215               	.LM14:
 216 0036 5E98      		cbi 43-32,6
 217 0038 88EE      		ldi r24,lo8(1000)
 218 003a 93E0      		ldi r25,hi8(1000)
 219               	.LBB147:
 220               	.LBB148:
 221               	.LBB149:
 222               	.LBB150:
 224               	.Ltext6:
 226               	.LM15:
 227 003c 20E7      		ldi r18,lo8(368)
 228 003e 31E0      		ldi r19,hi8(368)
 229               	.L9:
 230 0040 F901      		movw r30,r18
 231               	/* #APP */
 232               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 233 0042 3197      		1: sbiw r30,1
 234 0044 01F4      		brne 1b
 235               	 ;  0 "" 2
 236               	/* #NOAPP */
 237               	.LBE150:
 238               	.LBE149:
 240               	.Ltext7:
 242               	.LM16:
 243 0046 0197      		sbiw r24,1
 245               	.LM17:
 246 0048 01F4      		brne .L9
 247               	.LBE148:
 248               	.LBE147:
 250               	.Ltext8:
 766:main.c        **** 
 767:main.c        **** 		PORT_BUZ|=(1<<BUZ);
 251               		sbi 43-32,6
 252               		ldi r24,lo8(2000)
 253 004a 5E9A      		ldi r25,hi8(2000)
 254 004c 80ED      	.LBB151:
 255 004e 97E0      	.LBB152:
 256               	.LBB153:
 257               	.LBB154:
 259               	.Ltext9:
 261               	.LM19:
 262               		ldi r18,lo8(368)
 263               		ldi r19,hi8(368)
 264 0050 20E7      	.L10:
 265 0052 31E0      		movw r30,r18
 266               	/* #APP */
 267 0054 F901      	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 268               		1: sbiw r30,1
 269               		brne 1b
 270 0056 3197      	 ;  0 "" 2
 271 0058 01F4      	/* #NOAPP */
 272               	.LBE154:
 273               	.LBE153:
 275               	.Ltext10:
 277               	.LM20:
 278               		sbiw r24,1
 280 005a 0197      	.LM21:
 281               		brne .L10
 282               	.LBE152:
 283 005c 01F4      	.LBE151:
 285               	.Ltext11:
 287               	.LM22:
 768:main.c        **** 
 769:main.c        **** 		_delay_ms(200);
 288               	LFBB3
 289               	.LM23:
 290 005e 5E98      		sbi 43-32,6
 770:main.c        **** 
 291               	i r24,lo8(1000)
 292               		ldi r25,hi8(1000)
 293 0060 5E9A      	.LBB155:
 294 0062 88EE      	.LBB156:
 295 0064 93E0      	.LBB157:
 296               	.LBB158:
 298               	.Ltext12:
 300               	.LM24:
 301               		ldi r18,lo8(368)
 302               		ldi r19,hi8(368)
 303               	.L11:
 304 0066 20E7      		movw r30,r18
 305 0068 31E0      	/* #APP */
 306               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 307 006a F901      		1: sbiw r30,1
 308               		brne 1b
 309               	 ;  0 "" 2
 310 006c 3197      	/* #NOAPP */
 311 006e 01F4      	.LBE158:
 312               	.LBE157:
 314               	.Ltext13:
 316               	.LM25:
 317               		sbiw r24,1
 319               	.LM26:
 320 0070 0197      		brne .L11
 321               	.LBE156:
 322               	.LBE155:
 324               	.Ltext14:
 326               	.LM27:
 327               		cbi 43-32,6
 771:main.c        **** 
 772:main.c        **** 		PORT_BUZ&=~(1<<BUZ);
 328               	
 329               	.LBB159:
 330 0074 5E98      	.LBB160:
 331 0076 88EB      	.LBB161:
 332 0078 9BE0      	.LBB162:
 334               	.Ltext15:
 336               	.LM28:
 337               		ldi r18,lo8(368)
 338               		ldi r19,hi8(368)
 339               	.L12:
 340               		movw r30,r18
 341 007a 20E7      	/* #APP */
 342 007c 31E0      	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 343               		1: sbiw r30,1
 344 007e F901      		brne 1b
 345               	 ;  0 "" 2
 346               	/* #NOAPP */
 347 0080 3197      	.LBE162:
 348 0082 01F4      	.LBE161:
 350               	.Ltext16:
 352               	.LM29:
 353               		sbiw r24,1
 355               	.LM30:
 356               		brne .L12
 357 0084 0197      	.LBE160:
 358               	.LBE159:
 360 0086 01F4      	.Ltext17:
 362               	.LM31:
 363               		cbi 43-32,6
 364               		ldi r24,lo8(1000)
 773:main.c        **** 
 774:main.c        **** 		PORT_BUZ|=(1<<BUZ);
 365               	
 366               	.LBB165:
 367 0088 5E98      	.LBB166:
 369 008c 93E0      	.Ltext18:
 371               	.LM32:
 372               		ldi r18,lo8(368)
 373               		ldi r19,hi8(368)
 374               	.L13:
 375               		movw r30,r18
 376               	/* #APP */
 377               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 378 008e 20E7      		1: sbiw r30,1
 379 0090 31E0      		brne 1b
 380               	 ;  0 "" 2
 381 0092 F901      	/* #NOAPP */
 382               	.LBE166:
 383               	.LBE165:
 385 0096 01F4      	.Ltext19:
 387               	.LM33:
 388               		sbiw r24,1
 390               	.LM34:
 391               		brne .L13
 392               	.LBE164:
 393               	.LBE163:
 395               	.Ltext20:
 397 009a 01F4      	.LM35:
 398               		sbi 43-32,6
 399               		ldi r24,lo8(3000)
 400               		ldi r25,hi8(3000)
 401               	.LBB167:
 775:main.c        **** 
 776:main.c        **** 		_delay_ms(100);
 402               	c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h",132,0,0,.Ltext21
 403               	.Ltext21:
 405 009e 88EB      	.LM36:
 406 00a0 9BE0      		ldi r18,lo8(368)
 407               		ldi r19,hi8(368)
 408               	.L14:
 409               		movw r30,r18
 410               	/* #APP */
 411               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 412               		1: sbiw r30,1
 413               		brne 1b
 414               	 ;  0 "" 2
 415 00a2 20E7      	/* #NOAPP */
 416 00a4 31E0      	.LBE170:
 417               	.LBE169:
 419               	.Ltext22:
 421 00a8 3197      	.LM37:
 422 00aa 01F4      		sbiw r24,1
 424               	.LM38:
 425               		brne .L14
 426               	.LBE168:
 427               	.LBE167:
 429               	.Ltext23:
 431 00ac 0197      	.LM39:
 432               		cbi 43-32,6
 434 00ae 01F4      	.LM40:
 435               		cbi 42-32,6
 436               	/* epilogue start */
 438               	.LM41:
 777:main.c        **** 
 778:main.c        **** 		PORT_BUZ&=~(1<<BUZ);
 439               	0
 779:main.c        **** 
 780:main.c        **** 		_delay_ms(300);
 442               	tabs	"__count:r(1,4)",64,0,0,30
 781:main.c        **** 
 782:main.c        **** 		PORT_BUZ&=~(1<<BUZ);
 446               	abs	"__ticks:r(1,4)",64,0,0,24
 482               	.Lscope3:
 484               	.global	Buzzer_Enter0
 486               	Buzzer_Enter0:
 488               	.LM42:
 489               	.LFBB4:
 490               	/* prologue: function */
 491               	/* frame size = 0 */
 493               	.LM43:
 494               		sbi 43-32,6
 495               		ldi r24,lo8(1500)
 496               		ldi r25,hi8(1500)
 783:main.c        **** 
 784:main.c        **** 		_delay_ms(100);
 785:main.c        **** 		PORT_BUZ|=(1<<BUZ);
 497               	avr-20100110/lib/gcc/../../avr/include/util/delay_basic.h",132,0,0,.Ltext24
 498               	.Ltext24:
 500               	.LM44:
 501               		ldi r18,lo8(368)
 786:main.c        **** 
 787:main.c        **** 		_delay_ms(300);
 788:main.c        **** 		PORT_BUZ&=~(1<<BUZ);
 789:main.c        **** 
 502               	r19,hi8(368)
 503               	.L24:
 504 00b6 5E9A      		movw r30,r18
 505 00b8 8CED      	/* #APP */
 506 00ba 95E0      	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 507               		1: sbiw r30,1
 508               		brne 1b
 509               	 ;  0 "" 2
 510               	/* #NOAPP */
 511               	.LBE174:
 512               	.LBE173:
 514               	.Ltext25:
 516 00be 31E0      	.LM45:
 517               		sbiw r24,1
 519               	.LM46:
 520               		brne .L24
 521 00c2 3197      	.LBE172:
 522 00c4 01F4      	.LBE171:
 524               	.Ltext26:
 526               	.LM47:
 527               		cbi 43-32,6
 528               		ldi r24,lo8(4500)
 529               		ldi r25,hi8(4500)
 530               	.LBB175:
 531 00c6 0197      	.LBB176:
 532               	.LBB177:
 533               	.LBB178:
 535               	.Ltext27:
 537               	.LM48:
 538               		ldi r18,lo8(368)
 790:main.c        **** 
 791:main.c        **** 		DDR_BUZ&=~(1<<BUZ); //Buzzer OFF.
 539               	
 540               	/* #APP */
 541 00ca 5E98      	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 542 00cc 84E9      		1: sbiw r30,1
 543 00ce 91E1      		brne 1b
 544               	 ;  0 "" 2
 545               	/* #NOAPP */
 546               	.LBE178:
 547               	.LBE177:
 549               	.Ltext28:
 551               	.LM49:
 552 00d0 20E7      		sbiw r24,1
 554               	.LM50:
 555 00d4 F901      		brne .L25
 556               	.LBE176:
 557               	.LBE175:
 559 00d8 01F4      	.Ltext29:
 561               	.LM51:
 562               		sbi 43-32,6
 563               		ldi r24,lo8(1500)
 564               		ldi r25,hi8(1500)
 565               	.LBB179:
 566               	.LBB180:
 567               	.LBB181:
 568 00da 0197      	.LBB182:
 570               	.Ltext30:
 572               	.LM52:
 573               		ldi r18,lo8(368)
 574               		ldi r19,hi8(368)
 575               	.L26:
 792:main.c        **** 
 793:main.c        **** 
 576               	/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 577               		1: sbiw r30,1
 578 00de 5E9A      		brne 1b
 579 00e0 8CED      	 ;  0 "" 2
 580 00e2 95E0      	/* #NOAPP */
 581               	.LBE182:
 582               	.LBE181:
 584               	.Ltext31:
 586               	.LM53:
 587               		sbiw r24,1
 589 00e4 20E7      	.LM54:
 590 00e6 31E0      		brne .L26
 591               	.LBE180:
 592 00e8 F901      	.LBE179:
 594               	.Ltext32:
 596 00ec 01F4      	.LM55:
 597               		cbi 43-32,6
 598               		ldi r24,lo8(4500)
 599               		ldi r25,hi8(4500)
 600               	.LBB183:
 601               	.LBB184:
 602               	.LBB185:
 603               	.LBB186:
 605 00ee 0197      	.Ltext33:
 607               	.LM56:
 608 00f0 01F4      		ldi r18,lo8(368)
 609               		ldi r19,hi8(368)
 610               	.L27:
 611               		movw r30,r18
 612               	/* #APP */
 794:main.c        **** 
 795:main.c        **** }
 613               	./../avr/include/util/delay_basic.h" 1
 614               		1: sbiw r30,1
 615 00f2 5E98      		brne 1b
 616 00f4 84E9      	 ;  0 "" 2
 617 00f6 91E1      	/* #NOAPP */
 618               	.LBE186:
 619               	.LBE185:
 621               	.Ltext34:
 623               	.LM57:
 624               		sbiw r24,1
 626 00f8 20E7      	.LM58:
 627 00fa 31E0      		brne .L27
 628               	.LBE184:
 629 00fc F901      	.LBE183:
 631               	.Ltext35:
 633 0100 01F4      	.LM59:
 634               		sbi 43-32,6
 635               		ldi r24,lo8(3000)
 636               		ldi r25,hi8(3000)
 637               	.LBB187:
 638               	.LBB188:
 639               	.LBB189:
 640               	.LBB190:
 642 0102 0197      	.Ltext36:
 644               	.LM60:
 645 0104 01F4      		ldi r18,lo8(368)
 646               		ldi r19,hi8(368)
 647               	.L28:
 648               		movw r30,r18
 649               	/* #APP */
 796:main.c        **** 
 797:main.c        **** void Buzzer_Enter0(void)
 650               	./../avr/include/util/delay_basic.h" 1
 651               		1: sbiw r30,1
 652 0106 5E9A      		brne 1b
 653 0108 88EB      	 ;  0 "" 2
 654 010a 9BE0      	/* #NOAPP */
 655               	.LBE190:
 656               	.LBE189:
 658               	.Ltext37:
 660               	.LM61:
 661               		sbiw r24,1
 663 010c 20E7      	.LM62:
 664 010e 31E0      		brne .L28
 665               	.LBE188:
 666 0110 F901      	.LBE187:
 668               	.Ltext38:
 670 0114 01F4      	.LM63:
 671               		cbi 43-32,6
 672               	/* epilogue start */
 674               	.LM64:
 675               		ret
 798:main.c        **** {
 799:main.c        **** 
 687               	n	224,0,0,.LBE176-.LFBB4
 800:main.c        **** 		//PORTC|=PC3;
 801:main.c        **** 
 802:main.c        **** 		PORT_BUZ|=(1<<BUZ);
 691               	abn	192,0,0,.LBB181-.LFBB4
 706               	.Lscope4:
 708               	.global	main
 710               	main:
 712               	.LM65:
 713               	.LFBB5:
 714               		push r2
 715               		push r3
 716               		push r4
 717               		push r5
 718               		push r6
 719               		push r7
 720               		push r8
 721               		push r9
 722               		push r10
 723               		push r11
 724               		push r12
 725               		push r13
 726               		push r14
 727               		push r15
 728               		push r16
 729               		push r17
 730               		push r28
 731               		push r29
 732               	/* prologue: function */
 733 011e 2F92      	/* frame size = 0 */
 735 0122 4F92      	.LM66:
 736 0124 5F92      		sbi 39-32,3
 738 0128 7F92      	.LM67:
 739 012a 8F92      		sbi 39-32,1
 741 012e AF92      	.LM68:
 742 0130 BF92      		cbi 40-32,1
 744 0134 DF92      	.LM69:
 745 0136 EF92      		sbi 40-32,1
 747 013a 0F93      	.LM70:
 748 013c 1F93      		sbi 39-32,1
 750 0140 DF93      	.LM71:
 751               		sbi 42-32,6
 753               	.LM72:
 754               	/* #APP */
 755 0142 3B9A      	 ;  378 "main.c" 1
 756               		cli
 757               	 ;  0 "" 2
 759               	.LM73:
 760               	 ;  379 "main.c" 1
 761 0146 4198      		wdr
 762               	 ;  0 "" 2
 764 0148 419A      	.LM74:
 765               	/* #NOAPP */
 766               		ldi r18,lo8(15)
 767 014a 399A      		ldi r24,lo8(24)
 768               		ldi r25,hi8(24)
 769               	/* #APP */
 770 014c 569A      	 ;  380 "main.c" 1
 771               		in __tmp_reg__,__SREG__
 772               		cli
 773               		wdr
 774               		sts 96,r24
 775 014e F894      		out __SREG__,__tmp_reg__
 776               		sts 96,r18
 777               		
 778               	 ;  0 "" 2
 780 0150 A895      	.LM75:
 781               	/* #NOAPP */
 782               		cbi 42-32,5
 784               	.LM76:
 785 0152 2FE0      		sbi 43-32,5
 787 0156 90E0      	.LM77:
 788               		sts 197,__zero_reg__
 790 0158 0FB6      	.LM78:
 791 015a F894      		ldi r24,lo8(95)
 792 015c A895      		sts 196,r24
 794 0162 0FBE      	.LM79:
 795 0164 2093 6000 		ldi r24,lo8(2)
 796               		sts 192,r24
 798               	.LM80:
 799               		ldi r24,lo8(24)
 800               		sts 193,r24
 802               	.LM81:
 803               		ldi r24,lo8(6)
 804 016a 5D9A      		sts 194,r24
 806               	.LM82:
 807 016c 1092 C500 		sbis 41-32,5
 808               		rjmp .L36
 810 0170 8FE5      	.LM83:
 811 0172 8093 C400 	/* #APP */
 812               	 ;  475 "main.c" 1
 813               		wdr
 814 0176 82E0      	 ;  0 "" 2
 816               	.LM84:
 817               	/* #NOAPP */
 818 017c 88E1      		cbi 43-32,5
 820               	.LM85:
 821               		lds r24,192
 822 0182 86E0      		andi r24,lo8(-3)
 823 0184 8093 C200 		sts 192,r24
 825               	.LM86:
 826 0188 4D9B      		cbi 40-32,1
 828               	.LM87:
 829               		cbi 39-32,1
 831               	.LM88:
 832 018c A895      		cbi 42-32,6
 834               	.LM89:
 835               		ldi r30,lo8(0)
 836               		ldi r31,hi8(0)
 837 018e 5D98      		icall
 838               	.L36:
 840 0190 8091 C000 	.LM90:
 841 0194 8D7F      	/* #APP */
 842 0196 8093 C000 	 ;  536 "main.c" 1
 843               		wdr
 844               	 ;  0 "" 2
 845 019a 4198      	/* #NOAPP */
 846               		ldi r24,lo8(10000)
 847               		ldi r25,hi8(10000)
 848 019c 3998      	.LBB191:
 849               	.LBB192:
 850               	.LBB193:
 851 019e 5698      	.LBB194:
 853               	.Ltext39:
 855 01a2 F0E0      	.LM91:
 856 01a4 0995      		ldi r18,lo8(368)
 857               		ldi r19,hi8(368)
 858               	.L37:
 859               		movw r30,r18
 860               	/* #APP */
 861               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 862 01a6 A895      		1: sbiw r30,1
 863               		brne 1b
 864               	 ;  0 "" 2
 865 01a8 80E1      	/* #NOAPP */
 866 01aa 97E2      	.LBE194:
 867               	.LBE193:
 869               	.Ltext40:
 871               	.LM92:
 872               		sbiw r24,1
 874               	.LM93:
 875 01ac 20E7      		brne .L37
 876 01ae 31E0      	.LBE192:
 877               	.LBE191:
 879               	.Ltext41:
 881 01b2 3197      	.LM94:
 882 01b4 01F4      	/* #APP */
 883               	 ;  538 "main.c" 1
 884               		wdr
 885               	 ;  0 "" 2
 886               	/* #NOAPP */
 887               		ldi r24,lo8(10000)
 888               		ldi r25,hi8(10000)
 889               	.LBB195:
 890               	.LBB196:
 891 01b6 0197      	.LBB197:
 892               	.LBB198:
 894 01b8 01F4      	.Ltext42:
 896               	.LM95:
 897               		ldi r18,lo8(368)
 898               		ldi r19,hi8(368)
 899               	.L38:
 900               		movw r30,r18
 901               	/* #APP */
 902               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 903 01ba A895      		1: sbiw r30,1
 904               		brne 1b
 905               	 ;  0 "" 2
 906 01bc 80E1      	/* #NOAPP */
 907 01be 97E2      	.LBE198:
 908               	.LBE197:
 910               	.Ltext43:
 912               	.LM96:
 913               		sbiw r24,1
 915               	.LM97:
 916 01c0 20E7      		brne .L38
 917 01c2 31E0      	.LBE196:
 918               	.LBE195:
 920               	.Ltext44:
 922 01c6 3197      	.LM98:
 923 01c8 01F4      	/* #APP */
 924               	 ;  540 "main.c" 1
 925               		wdr
 926               	 ;  0 "" 2
 928               	.LM99:
 929               	/* #NOAPP */
 930               		rcall Buzzer_Enter0
 932 01ca 0197      	.LM100:
 933               	/* #APP */
 934               	 ;  542 "main.c" 1
 935 01cc 01F4      		wdr
 936               	 ;  0 "" 2
 937               	/* #NOAPP */
 938               		clr r12
 939               		clr r13
 940               		clr r10
 941               	.LBB199:
 942               	.LBB200:
 943               	.LBB201:
 945               	.LM101:
 946               		clr r4
 947               		inc r4
 949 01d0 00D0      	.LM102:
 950               		ldi r26,lo8(5)
 951               		mov r3,r26
 953               	.LM103:
 954 01d2 A895      		ldi r31,lo8(17)
 955               		mov r5,r31
 956               	.LBE201:
 957 01d4 CC24      	.LBE200:
 958 01d6 DD24      	.LBE199:
 959 01d8 AA24      	.LBB217:
 960               	.LBB218:
 962               	.LM104:
 963               		ldi r30,lo8(3)
 964               		mov r2,r30
 965 01da 4424      	.L114:
 966 01dc 4394      	.LBE218:
 967               	.LBE217:
 969 01de A5E0      	.LM105:
 970 01e0 3A2E      	/* #APP */
 971               	 ;  548 "main.c" 1
 972               		wdr
 973 01e2 F1E1      	 ;  0 "" 2
 974 01e4 5F2E      	/* #NOAPP */
 975               		rjmp .L39
 976               	.L40:
 977               	.LBB221:
 978               	.LBB222:
 980               	.LM106:
 981               	/* #APP */
 982 01e6 E3E0      	 ;  191 "main.c" 1
 983 01e8 2E2E      		wdr
 984               	 ;  0 "" 2
 985               	/* #NOAPP */
 986               	.L39:
 987               		lds r24,192
 988               		sbrs r24,7
 989               		rjmp .L40
 991 01ea A895      	.LM107:
 992               		lds r25,198
 993               	.LBE222:
 994 01ec 00C0      	.LBE221:
 996               	.LM108:
 997               		cpi r25,lo8(97)
 998               		brne .L41
 1000               	.LM109:
 1001               		ldi r24,lo8(89)
 1002 01ee A895      		rjmp .L120
 1003               	.L41:
 1005               	.LM110:
 1006 01f0 8091 C000 		cpi r25,lo8(65)
 1007 01f4 87FF      		brne .L115
 1008 01f6 00C0      		rjmp .L107
 1009               	.L45:
 1010               	.LBB223:
 1011 01f8 9091 C600 	.LBB224:
 1013               	.LM111:
 1014               	/* #APP */
 1015               	 ;  191 "main.c" 1
 1016 01fc 9136      		wdr
 1017 01fe 01F4      	 ;  0 "" 2
 1018               	/* #NOAPP */
 1019               	.L107:
 1020 0200 89E5      		lds r24,192
 1021 0202 00C0      		sbrs r24,7
 1022               		rjmp .L45
 1024               	.LM112:
 1025 0204 9134      		lds r25,198
 1026 0206 01F4      		rjmp .L46
 1027 0208 00C0      	.L47:
 1028               	.LBE224:
 1029               	.LBE223:
 1030               	.LBB225:
 1031               	.LBB226:
 1033               	.LM113:
 1034               	/* #APP */
 1035 020a A895      	 ;  191 "main.c" 1
 1036               		wdr
 1037               	 ;  0 "" 2
 1038               	/* #NOAPP */
 1039 020c 8091 C000 	.L46:
 1040 0210 87FF      		lds r24,192
 1041 0212 00C0      		sbrs r24,7
 1042               		rjmp .L47
 1044 0214 9091 C600 	.LM114:
 1045 0218 00C0      		lds r24,198
 1046               	.LBE226:
 1047               	.LBE225:
 1049               	.LM115:
 1050               		mov r7,r25
 1051               		clr r6
 1052               		mov r12,r24
 1053               		clr r13
 1054               		or r12,r6
 1055 021a A895      		or r13,r7
 1056               		rjmp .L121
 1057               	.L115:
 1059 021c 8091 C000 	.LM116:
 1060 0220 87FF      		cpi r25,lo8(98)
 1061 0222 00C0      		brne .L48
 1063               	.LM117:
 1064 0224 8091 C600 		ldi r24,lo8(89)
 1065               		rcall sendchar
 1067               	.LM118:
 1068               		ldi r24,lo8(0)
 1069 0228 792E      		rcall sendchar
 1071 022c C82E      	.LM119:
 1072 022e DD24      		ldi r24,lo8(64)
 1073 0230 C628      		rjmp .L120
 1074 0232 D728      	.L48:
 1076               	.LM120:
 1077               		cpi r25,lo8(66)
 1078               		breq .+2
 1079 0236 9236      		rjmp .L116
 1080 0238 01F4      		rjmp .L108
 1081               	.L51:
 1082               	.LBB227:
 1083 023a 89E5      	.LBB204:
 1084 023c 00D0      	.LBB205:
 1086               	.LM121:
 1087 023e 80E0      	/* #APP */
 1088 0240 00D0      	 ;  191 "main.c" 1
 1089               		wdr
 1090               	 ;  0 "" 2
 1091 0242 80E4      	/* #NOAPP */
 1092 0244 00C0      	.L108:
 1093               		lds r24,192
 1094               		sbrs r24,7
 1095               		rjmp .L51
 1097 0248 01F0      	.LM122:
 1098 024a 00C0      		lds r24,198
 1099 024c 00C0      		rjmp .L52
 1100               	.L53:
 1101               	.LBE205:
 1102               	.LBE204:
 1103               	.LBB206:
 1104               	.LBB207:
 1106               	.LM123:
 1107               	/* #APP */
 1108 024e A895      	 ;  191 "main.c" 1
 1109               		wdr
 1110               	 ;  0 "" 2
 1111               	/* #NOAPP */
 1112 0250 8091 C000 	.L52:
 1113 0254 87FF      		lds r24,192
 1114 0256 00C0      		sbrs r24,7
 1115               		rjmp .L53
 1117 0258 8091 C600 	.LM124:
 1118 025c 00C0      		lds r17,198
 1119               		rjmp .L54
 1120               	.L55:
 1121               	.LBE207:
 1122               	.LBE206:
 1123               	.LBB208:
 1124               	.LBB209:
 1126               	.LM125:
 1127               	/* #APP */
 1128 025e A895      	 ;  191 "main.c" 1
 1129               		wdr
 1130               	 ;  0 "" 2
 1131               	/* #NOAPP */
 1132 0260 8091 C000 	.L54:
 1133 0264 87FF      		lds r24,192
 1134 0266 00C0      		sbrs r24,7
 1135               		rjmp .L55
 1137 0268 1091 C600 	.LM126:
 1138 026c 00C0      		lds r18,198
 1139               		ldi r25,lo8(0)
 1140               		ldi r30,lo8(gBuffer)
 1141               		ldi r31,hi8(gBuffer)
 1142               	.L60:
 1143               	.LBE209:
 1144               	.LBE208:
 1145               	.LBB210:
 1146               	.LBB211:
 1148 026e A895      	.LM127:
 1149               		cp r25,r17
 1150               		brlo .L109
 1151               		ldi r24,lo8(-1)
 1152 0270 8091 C000 		rjmp .L57
 1153 0274 87FF      	.L58:
 1154 0276 00C0      	.LBB212:
 1155               	.LBB213:
 1157 0278 2091 C600 	.LM128:
 1158 027c 90E0      	/* #APP */
 1159 027e E0E0      	 ;  191 "main.c" 1
 1160 0280 F0E0      		wdr
 1161               	 ;  0 "" 2
 1162               	/* #NOAPP */
 1163               	.L109:
 1164               		lds r24,192
 1165               		sbrs r24,7
 1166               		rjmp .L58
 1168 0282 9117      	.LM129:
 1169 0284 00F0      		lds r24,198
 1170 0286 8FEF      	.L57:
 1171 0288 00C0      	.LBE213:
 1172               	.LBE212:
 1174               	.LM130:
 1175               		st Z,r24
 1177               	.LM131:
 1178               		subi r25,lo8(-(1))
 1179 028a A895      		cpi r25,lo8(64)
 1180               		breq .L59
 1182               	.LM132:
 1183 028c 8091 C000 		adiw r30,1
 1184 0290 87FF      		rjmp .L60
 1185 0292 00C0      	.L59:
 1186               	.LBE211:
 1187               	.LBE210:
 1189               	.LM133:
 1190               		ldi r24,lo8(119)
 1191               		cp r10,r24
 1192               		breq .+2
 1193               		rjmp .L122
 1195               	.LM134:
 1196               		cpi r18,lo8(70)
 1197 029a 9F5F      		brne .L62
 1198 029c 9034      	.LBB214:
 1199 029e 01F0      	.LBB202:
 1201               	.LM135:
 1202 02a0 3196      		clr r14
 1203 02a2 00C0      		clr r15
 1204               		lsl r12
 1205               		rol r13
 1206               		rol r14
 1207               		rol r15
 1208               		movw r20,r14
 1209 02a4 87E7      		movw r18,r12
 1210 02a6 A816      		ldi r26,lo8(gBuffer)
 1211 02a8 01F0      		ldi r27,hi8(gBuffer)
 1212 02aa 00C0      	.L63:
 1214               	.LM136:
 1215 02ac 2634      		ld r24,X
 1216 02ae 01F4      		ldi r25,lo8(0)
 1218               	.LM137:
 1219               		adiw r26,1
 1220               		ld r9,X
 1221 02b0 EE24      		sbiw r26,1
 1222 02b2 FF24      		clr r8
 1223 02b4 CC0C      		or r24,r8
 1224 02b6 DD1C      		or r25,r9
 1226 02ba FF1C      	.LM138:
 1227 02bc A701      		adiw r26,2
 1229 02c0 A0E0      	.LM139:
 1230 02c2 B0E0      		movw r30,r18
 1231               	/* #APP */
 1232               	 ;  231 "main.c" 1
 1233               		movw  r0, r24
 1234 02c4 8C91      		sts 87, r4
 1235 02c6 90E0      		spm
 1236               		clr  r1
 1237               		
 1238 02c8 1196      	 ;  0 "" 2
 1240 02cc 1197      	.LM140:
 1241 02ce 8824      	/* #NOAPP */
 1242 02d0 8829      		subi r18,lo8(-(2))
 1243 02d2 9929      		sbci r19,hi8(-(2))
 1244               		sbci r20,hlo8(-(2))
 1245               		sbci r21,hhi8(-(2))
 1247               	.LM141:
 1248               		subi r17,lo8(-(-2))
 1250               	.LM142:
 1251               		brne .L63
 1253 02da 4092 5700 	.LM143:
 1254 02de E895      		movw r30,r12
 1255 02e0 1124      	/* #APP */
 1256               	 ;  238 "main.c" 1
 1257               		sts 87, r3
 1258               		spm
 1259               		
 1260               	 ;  0 "" 2
 1261 02e2 2E5F      	/* #NOAPP */
 1262 02e4 3F4F      	.L64:
 1263 02e6 4F4F      	.LBE202:
 1265               	.LM144:
 1266               		in __tmp_reg__,87-32
 1267 02ea 1250      		sbrc __tmp_reg__,0
 1268               		rjmp .L64
 1269               	.LBB203:
 1271               	.LM145:
 1272               	/* #APP */
 1273 02ee F601      	 ;  240 "main.c" 1
 1274               		sts 87, r5
 1275               		spm
 1276 02f0 3092 5700 		
 1277 02f4 E895      	 ;  0 "" 2
 1279               	.LM146:
 1280               	/* #NOAPP */
 1281               		lsr r21
 1282               		ror r20
 1283               		ror r19
 1284               		ror r18
 1285 02f6 07B6      		movw r12,r18
 1286 02f8 00FC      		rjmp .L121
 1287 02fa 00C0      	.L62:
 1288               	.LBE203:
 1289               	.LBE214:
 1291               	.LM147:
 1292               		cpi r18,lo8(69)
 1293 02fc 5092 5700 		breq .+2
 1294 0300 E895      		rjmp .L121
 1295               		mov r16,r17
 1296               		movw r14,r12
 1297               		ldi r28,lo8(gBuffer)
 1298               		ldi r29,hi8(gBuffer)
 1299               	.L66:
 1300 0302 5695      	.LBB215:
 1301 0304 4795      	.LBB216:
 1303 0308 2795      	.LM148:
 1304 030a 6901      		ld r22,Y+
 1305 030c 00C0      		movw r24,r14
 1306               		rcall __eewr_byte_m88
 1308               	.LM149:
 1309               		sec
 1310               		adc r14,__zero_reg__
 1311 030e 2534      		adc r15,__zero_reg__
 1313 0312 00C0      	.LM150:
 1314 0314 012F      		subi r16,lo8(-(-1))
 1316 0318 C0E0      	.LM151:
 1317 031a D0E0      		brne .L66
 1318               		subi r17,lo8(-(-1))
 1319               		mov r24,r17
 1320               		ldi r25,lo8(0)
 1321               		adiw r24,1
 1322               		add r12,r24
 1323 031c 6991      		adc r13,r25
 1324 031e C701      		rjmp .L121
 1325 0320 00D0      	.L116:
 1326               	.LBE216:
 1327               	.LBE215:
 1328 0322 0894      	.LBE227:
 1330 0326 F11C      	.LM152:
 1331               		cpi r25,lo8(103)
 1332               		breq .+2
 1333 0328 0150      		rjmp .L117
 1334               		rjmp .L110
 1335               	.L69:
 1336 032a 01F4      	.LBB228:
 1337 032c 1150      	.LBB229:
 1338 032e 812F      	.LBB230:
 1340 0332 0196      	.LM153:
 1341 0334 C80E      	/* #APP */
 1342 0336 D91E      	 ;  191 "main.c" 1
 1343 0338 00C0      		wdr
 1344               	 ;  0 "" 2
 1345               	/* #NOAPP */
 1346               	.L110:
 1347               		lds r24,192
 1348               		sbrs r24,7
 1349               		rjmp .L69
 1351 033c 01F0      	.LM154:
 1352 033e 00C0      		lds r24,198
 1353 0340 00C0      		rjmp .L70
 1354               	.L71:
 1355               	.LBE230:
 1356               	.LBE229:
 1357               	.LBB231:
 1358               	.LBB232:
 1360               	.LM155:
 1361               	/* #APP */
 1362 0342 A895      	 ;  191 "main.c" 1
 1363               		wdr
 1364               	 ;  0 "" 2
 1365               	/* #NOAPP */
 1366 0344 8091 C000 	.L70:
 1367 0348 87FF      		lds r24,192
 1368 034a 00C0      		sbrs r24,7
 1369               		rjmp .L71
 1371 034c 8091 C600 	.LM156:
 1372 0350 00C0      		lds r11,198
 1373               		rjmp .L72
 1374               	.L73:
 1375               	.LBE232:
 1376               	.LBE231:
 1377               	.LBB233:
 1378               	.LBB234:
 1380               	.LM157:
 1381               	/* #APP */
 1382 0352 A895      	 ;  191 "main.c" 1
 1383               		wdr
 1384               	 ;  0 "" 2
 1385               	/* #NOAPP */
 1386 0354 8091 C000 	.L72:
 1387 0358 87FF      		lds r24,192
 1388 035a 00C0      		sbrs r24,7
 1389               		rjmp .L73
 1391 035c B090 C600 	.LM158:
 1392 0360 00C0      		lds r24,198
 1393               	.LBE234:
 1394               	.LBE233:
 1396               	.LM159:
 1397               		cpi r24,lo8(70)
 1398               		brne .L74
 1399               	.LBB235:
 1400               	.LBB236:
 1402 0362 A895      	.LM160:
 1403               		clr r14
 1404               		clr r15
 1405               		lsl r12
 1406 0364 8091 C000 		rol r13
 1407 0368 87FF      		rol r14
 1408 036a 00C0      		rol r15
 1409               	.L75:
 1410               	.LBB237:
 1412               	.LM161:
 1413               		movw r30,r12
 1414               	/* #APP */
 1415               	 ;  276 "main.c" 1
 1416 0370 8634      		lpm r16, Z+
 1417 0372 01F4      		lpm r17, Z
 1418               		
 1419               	 ;  0 "" 2
 1420               	/* #NOAPP */
 1421               	.LBE237:
 1423 0376 FF24      	.LM162:
 1424 0378 CC0C      		mov r24,r16
 1425 037a DD1C      		rcall sendchar
 1427 037e FF1C      	.LM163:
 1428               		mov r24,r17
 1429               		rcall sendchar
 1431               	.LM164:
 1432 0380 F601      		ldi r24,lo8(2)
 1433               		ldi r25,hi8(2)
 1434               		ldi r26,hlo8(2)
 1435 0382 0591      		ldi r27,hhi8(2)
 1436 0384 1491      		add r12,r24
 1437               		adc r13,r25
 1438               		adc r14,r26
 1439               		adc r15,r27
 1441               	.LM165:
 1442               		ldi r25,lo8(-2)
 1443 0386 802F      		add r11,r25
 1445               	.LM166:
 1446               		brne .L75
 1448 038c 00D0      	.LM167:
 1449               		lsr r15
 1450               		ror r14
 1451 038e 82E0      		ror r13
 1452 0390 90E0      		ror r12
 1453 0392 A0E0      		rjmp .L114
 1454 0394 B0E0      	.L74:
 1455 0396 C80E      	.LBE236:
 1456 0398 D91E      	.LBE235:
 1458 039c FB1E      	.LM168:
 1459               		cpi r24,lo8(69)
 1460               		breq .+2
 1461 039e 9EEF      		rjmp .L114
 1462 03a0 B90E      		mov r16,r11
 1463               		movw r14,r12
 1464               	.L76:
 1465 03a2 01F4      	.LBB238:
 1466               	.LBB239:
 1468 03a4 F694      	.LM169:
 1469 03a6 E794      	/* #APP */
 1470 03a8 D794      	 ;  307 "main.c" 1
 1471 03aa C794      		wdr
 1472 03ac 00C0      	 ;  0 "" 2
 1473               	/* #NOAPP */
 1474               	.LBE239:
 1476               	.LM170:
 1477               		movw r24,r14
 1478 03ae 8534      		rcall __eerd_byte_m88
 1479 03b0 01F0      	.LBB240:
 1480 03b2 00C0      		rcall sendchar
 1482 03b6 7601      	.LM171:
 1483               		sec
 1484               		adc r14,__zero_reg__
 1485               		adc r15,__zero_reg__
 1487               	.LM172:
 1488               		subi r16,lo8(-(-1))
 1490 03b8 A895      	.LM173:
 1491               		brne .L76
 1492               		dec r11
 1493               		mov r24,r11
 1494               		ldi r25,lo8(0)
 1495               		adiw r24,1
 1496 03ba C701      		add r12,r24
 1497 03bc 00D0      		adc r13,r25
 1498               		rjmp .L114
 1499 03be 00D0      	.L117:
 1500               	.LBE240:
 1501               	.LBE238:
 1502 03c0 0894      	.LBE228:
 1504 03c4 F11C      	.LM174:
 1505               		cpi r25,lo8(101)
 1506               		brne .L77
 1508               	.LM175:
 1509               		ldi r26,lo8(119)
 1510 03c8 01F4      		cp r10,r26
 1511 03ca BA94      		breq .+2
 1512 03cc 8B2D      		rjmp .L121
 1513 03ce 90E0      		ldi r30,lo8(0)
 1514 03d0 0196      		ldi r31,hi8(0)
 1515 03d2 C80E      	.L80:
 1516 03d4 D91E      	.LBB241:
 1517 03d6 00C0      	.LBB219:
 1519               	.LM176:
 1520               	/* #APP */
 1521               	 ;  201 "main.c" 1
 1522               		sts 87, r2
 1523               		spm
 1524 03d8 9536      		
 1525 03da 01F4      	 ;  0 "" 2
 1526               	/* #NOAPP */
 1527               	.L79:
 1528 03dc A7E7      	.LBE219:
 1530 03e0 01F0      	.LM177:
 1531 03e2 00C0      		in __tmp_reg__,87-32
 1532 03e4 E0E0      		sbrc __tmp_reg__,0
 1533 03e6 F0E0      		rjmp .L79
 1534               	.LBB220:
 1536               	.LM178:
 1537               	/* #APP */
 1538               	 ;  204 "main.c" 1
 1539               		wdr
 1540               	 ;  0 "" 2
 1541 03e8 2092 5700 	/* #NOAPP */
 1542 03ec E895      		subi r30,lo8(-(64))
 1543               		sbci r31,hi8(-(64))
 1545               	.LM179:
 1546               		ldi r27,hi8(6144)
 1547               		cpi r30,lo8(6144)
 1548               		cpc r31,r27
 1549               		brne .L80
 1551 03f0 00FC      	.LM180:
 1552 03f2 00C0      	/* #APP */
 1553               	 ;  206 "main.c" 1
 1554               		sts 87, r5
 1555               		spm
 1556               		
 1557               	 ;  0 "" 2
 1558 03f4 A895      	/* #NOAPP */
 1559               		rjmp .L121
 1560               	.L77:
 1561 03f6 E05C      	.LBE220:
 1562 03f8 FF4F      	.LBE241:
 1564               	.LM181:
 1565 03fa B8E1      		cpi r25,lo8(69)
 1566 03fc E030      		brne .L81
 1568 0400 01F4      	.LM182:
 1569               		cbi 40-32,1
 1571               	.LM183:
 1572               		cbi 39-32,1
 1574 0406 E895      	.LM184:
 1575               	/* #APP */
 1576               	 ;  636 "main.c" 1
 1577               		wdr
 1578 0408 00C0      	 ;  0 "" 2
 1580               	.LM185:
 1581               	/* #NOAPP */
 1582               		rcall Buzzer_End0
 1584 040a 9534      	.LM186:
 1585 040c 01F4      	/* #APP */
 1586               	 ;  640 "main.c" 1
 1587               		wdr
 1588 040e 4198      	 ;  0 "" 2
 1590               	.LM187:
 1591 0410 3998      	/* #NOAPP */
 1592               		ldi r18,lo8(12)
 1593               		ldi r24,lo8(24)
 1594               		ldi r25,hi8(24)
 1595               	/* #APP */
 1596 0412 A895      	 ;  642 "main.c" 1
 1597               		in __tmp_reg__,__SREG__
 1598               		cli
 1599               		wdr
 1600               		sts 96,r24
 1601 0414 00D0      		out __SREG__,__tmp_reg__
 1602               		sts 96,r18
 1603               		
 1604               	 ;  0 "" 2
 1606 0416 A895      	.LM188:
 1607               	/* #NOAPP */
 1608               		ldi r24,lo8(13)
 1609               		rcall sendchar
 1610               	.L82:
 1611 0418 2CE0      		rjmp .L82
 1612 041a 88E1      	.L81:
 1614               	.LM189:
 1615               		cpi r25,lo8(80)
 1616 041e 0FB6      		breq .L121
 1617 0420 F894      	.L83:
 1619 0424 8093 6000 	.LM190:
 1620 0428 0FBE      		cpi r25,lo8(76)
 1621 042a 2093 6000 		breq .L121
 1622               	.L84:
 1624               	.LM191:
 1625               		cpi r25,lo8(112)
 1626               		brne .L85
 1628 0430 00D0      	.LM192:
 1629               		ldi r24,lo8(83)
 1630 0432 00C0      		rjmp .L120
 1631               	.L85:
 1633               	.LM193:
 1634 0434 9035      		cpi r25,lo8(116)
 1635 0436 01F0      		brne .L86
 1637               	.LM194:
 1638               		ldi r24,lo8(119)
 1639 0438 9C34      		rcall sendchar
 1640 043a 01F0      	.L122:
 1642               	.LM195:
 1643               		ldi r24,lo8(0)
 1644 043c 9037      		rjmp .L120
 1645 043e 01F4      	.L86:
 1647               	.LM196:
 1648 0440 83E5      		mov r24,r25
 1649 0442 00C0      		subi r24,lo8(-(-120))
 1650               		cpi r24,lo8(2)
 1651               		brsh .L118
 1652               		rjmp .L112
 1653 0444 9437      	.L89:
 1654 0446 01F4      	.LBB242:
 1655               	.LBB243:
 1657 0448 87E7      	.LM197:
 1658 044a 00D0      	/* #APP */
 1659               	 ;  191 "main.c" 1
 1660               		wdr
 1661               	 ;  0 "" 2
 1662 044c 80E0      	/* #NOAPP */
 1663 044e 00C0      	.L112:
 1664               		lds r24,192
 1665               		sbrs r24,7
 1666               		rjmp .L89
 1668 0452 8857      	.LM198:
 1669 0454 8230      		lds r24,198
 1670 0456 00F4      		rjmp .L121
 1671 0458 00C0      	.L118:
 1672               	.LBE243:
 1673               	.LBE242:
 1675               	.LM199:
 1676               		cpi r25,lo8(84)
 1677               		brne .L119
 1678               		rjmp .L113
 1679 045a A895      	.L92:
 1680               	.LBB244:
 1681               	.LBB245:
 1683 045c 8091 C000 	.LM200:
 1684 0460 87FF      	/* #APP */
 1685 0462 00C0      	 ;  191 "main.c" 1
 1686               		wdr
 1687               	 ;  0 "" 2
 1688 0464 8091 C600 	/* #NOAPP */
 1689 0468 00C0      	.L113:
 1690               		lds r24,192
 1691               		sbrs r24,7
 1692               		rjmp .L92
 1694               	.LM201:
 1695 046a 9435      		lds r10,198
 1696 046c 01F4      	.L121:
 1697 046e 00C0      	.LBE245:
 1698               	.LBE244:
 1700               	.LM202:
 1701               		ldi r24,lo8(13)
 1702               		rjmp .L120
 1703               	.L119:
 1705 0470 A895      	.LM203:
 1706               		cpi r25,lo8(83)
 1707               		brne .L93
 1708               	.LBB246:
 1709 0472 8091 C000 	.LBB247:
 1711 0478 00C0      	.LM204:
 1712               		ldi r24,lo8(65)
 1713               		rcall sendchar
 1715               	.LM205:
 1716               		ldi r24,lo8(86)
 1717               		rcall sendchar
 1719               	.LM206:
 1720 047e 8DE0      		ldi r24,lo8(82)
 1721 0480 00C0      		rcall sendchar
 1723               	.LM207:
 1724               		ldi r24,lo8(66)
 1725 0482 9335      		rcall sendchar
 1727               	.LM208:
 1728               		ldi r24,lo8(79)
 1729               		rcall sendchar
 1731 0486 81E4      	.LM209:
 1732 0488 00D0      		ldi r24,lo8(79)
 1733               		rcall sendchar
 1735 048a 86E5      	.LM210:
 1736 048c 00D0      		ldi r24,lo8(84)
 1737               		rjmp .L120
 1738               	.L93:
 1739 048e 82E5      	.LBE247:
 1740 0490 00D0      	.LBE246:
 1742               	.LM211:
 1743 0492 82E4      		cpi r25,lo8(86)
 1744 0494 00D0      		brne .L94
 1746               	.LM212:
 1747 0496 8FE4      		ldi r24,lo8(48)
 1748 0498 00D0      		rcall sendchar
 1750               	.LM213:
 1751 049a 8FE4      		ldi r24,lo8(56)
 1752 049c 00D0      		rjmp .L120
 1753               	.L94:
 1755 049e 84E5      	.LM214:
 1756 04a0 00C0      		cpi r25,lo8(115)
 1757               		brne .L95
 1759               	.LM215:
 1760               		ldi r24,lo8(10)
 1761               		rcall sendchar
 1763 04a4 01F4      	.LM216:
 1764               		ldi r24,lo8(-109)
 1765               		rcall sendchar
 1767 04a8 00D0      	.LM217:
 1768               		ldi r24,lo8(30)
 1769               		rjmp .L120
 1770 04aa 88E3      	.L95:
 1772               	.LM218:
 1773               		cpi r25,lo8(27)
 1774               		brne .+2
 1775 04ae 9337      		rjmp .L114
 1777               	.LM219:
 1778               		ldi r24,lo8(63)
 1779 04b2 8AE0      	.L120:
 1780 04b4 00D0      		rcall sendchar
 1781               		rjmp .L114
 1838               	.Lscope5:
 1839               		.comm gBuffer,64,1
 1842               	.Letext0:
 1843               	.global __do_clear_bss
 1844               	...
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\IVAN\AppData\Local\Temp/ccjKw2kb.s:2      *ABS*:0000003f __SREG__
C:\Users\IVAN\AppData\Local\Temp/ccjKw2kb.s:3      *ABS*:0000003e __SP_H__
C:\Users\IVAN\AppData\Local\Temp/ccjKw2kb.s:4      *ABS*:0000003d __SP_L__
C:\Users\IVAN\AppData\Local\Temp/ccjKw2kb.s:5      *ABS*:00000034 __CCP__
C:\Users\IVAN\AppData\Local\Temp/ccjKw2kb.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\IVAN\AppData\Local\Temp/ccjKw2kb.s:7      *ABS*:00000001 __zero_reg__
C:\Users\IVAN\AppData\Local\Temp/ccjKw2kb.s:96     .text:00000000 __vector_default
C:\Users\IVAN\AppData\Local\Temp/ccjKw2kb.s:111    .text:00000002 sendchar
C:\Users\IVAN\AppData\Local\Temp/ccjKw2kb.s:171    .text:00000022 Buzzer_End0
C:\Users\IVAN\AppData\Local\Temp/ccjKw2kb.s:496    .text:000000b6 Buzzer_Enter0
C:\Users\IVAN\AppData\Local\Temp/ccjKw2kb.s:729    .text:0000011e main
                            *COM*:00000040 gBuffer

UNDEFINED SYMBOLS
__eewr_byte_m88
__eerd_byte_m88
__do_clear_bss
